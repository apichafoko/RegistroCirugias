using Telegram.Bot;
using RegistroCx.Models;
using RegistroCx.Services.Extraction;
using RegistroCx.Services.Flow;
using RegistroCx.Services.Reports;
using RegistroCx.Helpers._0Auth;
using RegistroCx.Services.Repositories;
using RegistroCx.ProgramServices.Services.Telegram;
using RegistroCx.Services.Analytics;
using RegistroCx.Services.Caching;
using RegistroCx.Services.UI;
using RegistroCx.Helpers;
using RegistroCx.Services.Context;
using RegistroCx.models;
using System.Text.RegularExpressions;

namespace RegistroCx.Services;

/// <summary>
/// Servicio principal para gestionar el flujo conversacional de registro de cirug√≠as v√≠a Telegram.
/// 
/// <para>üìÅ Estructura de archivos creada:</para>
/// <list type="bullet">
///   <item><description><b>CirugiaFlowService.cs</b> - Archivo principal (orquestador)</description></item>
///   <item><description><b>FlowStateManager.cs</b> - Gesti√≥n de estado y contexto</description></item>
///   <item><description><b>FlowMessageHandler.cs</b> - Manejo de mensajes y respuestas</description></item>
///   <item><description><b>FlowValidationHelper.cs</b> - Validaciones y confirmaciones</description></item>
///   <item><description><b>FlowWizardHandler.cs</b> - Wizard de campos paso a paso</description></item>
///   <item><description><b>FlowLLMProcessor.cs</b> - Procesamiento con LLM</description></item>
///   <item><description><b>LLMContextManager.cs</b> (ya creado antes) - Contexto inteligente para LLM</description></item>
/// </list>
/// 
/// <para>üéØ <b>Ventajas de esta refactorizaci√≥n:</b></para>
/// <list type="bullet">
///   <item><description><b>üì¶ Separaci√≥n de responsabilidades:</b></description></item>
///   <item><description>‚Ä¢ <b>Estado:</b> FlowStateManager maneja conversaciones activas</description></item>
///   <item><description>‚Ä¢ <b>Mensajes:</b> FlowMessageHandler procesa respuestas del usuario</description></item>
///   <item><description>‚Ä¢ <b>Validaci√≥n:</b> FlowValidationHelper confirma y valida datos</description></item>
///   <item><description>‚Ä¢ <b>Wizard:</b> FlowWizardHandler gu√≠a paso a paso</description></item>
///   <item><description>‚Ä¢ <b>LLM:</b> FlowLLMProcessor normaliza con inteligencia artificial</description></item>
/// </list>
/// 
/// <para>üßπ <b>C√≥digo m√°s limpio:</b></para>
/// <list type="bullet">
///   <item><description>‚Ä¢ <b>Archivos peque√±os:</b> Cada uno ~100-200 l√≠neas m√°ximo</description></item>
///   <item><description>‚Ä¢ <b>F√°cil mantenimiento:</b> Cambios aislados por funcionalidad</description></item>
///   <item><description>‚Ä¢ <b>F√°cil testing:</b> Cada componente se puede probar independientemente</description></item>
///   <item><description>‚Ä¢ <b>F√°cil extensi√≥n:</b> Agregar nuevas funcionalidades sin tocar el core</description></item>
/// </list>
/// </summary>
/// üìÅ Estructura de archivos creada:


public class CirugiaFlowService
{
    private readonly LLMOpenAIAssistant _llm;
    private readonly Dictionary<long, Appointment> _pending;

    // Helpers especializados
    private readonly FlowStateManager _stateManager;
    private readonly FlowMessageHandler _messageHandler;
    private readonly FlowWizardHandler _wizardHandler;
    private readonly FlowLLMProcessor _llmProcessor;
    private readonly AppointmentConfirmationService _confirmationService;
    private readonly MultiSurgeryParser _multiSurgeryParser;
    private readonly IUserProfileRepository _userRepo;
    private readonly UserLearningService _learningService;
    
    // Nuevos servicios para modificaci√≥n
    private readonly AppointmentSearchService _searchService;
    private readonly AppointmentModificationService _modificationService;
    private readonly AppointmentUpdateCoordinator _updateCoordinator;
    
    // Servicios de MVP improvements
    private readonly IParsingAnalyticsService _analytics;
    private readonly ICacheService _cache;
    private readonly IQuickEditService _quickEdit;
    private readonly IConversationContextManager _contextManager;
    
    // Sistema de equipos
    private readonly EquipoService _equipoService;
    
    // Validaci√≥n de contexto m√©dico
    private readonly MedicalContextValidator _medicalValidator;

    public CirugiaFlowService(
        LLMOpenAIAssistant llm, 
        Dictionary<long, Appointment> pending,
        AppointmentConfirmationService confirmationService,
        IGoogleOAuthService oauthService,
        IUserProfileRepository userRepo,
        CalendarSyncService calendarSync,
        IAppointmentRepository appointmentRepo,
        MultiSurgeryParser multiSurgeryParser,
        IReportService reportService,
        IAnesthesiologistSearchService anesthesiologistSearchService,
        UserLearningService learningService,
        AppointmentSearchService searchService,
        AppointmentModificationService modificationService,
        AppointmentUpdateCoordinator updateCoordinator,
        IParsingAnalyticsService analytics,
        ICacheService cache,
        IQuickEditService quickEdit,
        IConversationContextManager contextManager,
        EquipoService equipoService,
        MedicalContextValidator medicalValidator)
    {
        _llm = llm;
        _pending = pending;
        _confirmationService = confirmationService;
        _multiSurgeryParser = multiSurgeryParser;
        _userRepo = userRepo;
        _learningService = learningService;
        _searchService = searchService;
        _modificationService = modificationService;
        _updateCoordinator = updateCoordinator;
        _analytics = analytics;
        _cache = cache;
        _quickEdit = quickEdit;
        _contextManager = contextManager;
        _equipoService = equipoService;
        _medicalValidator = medicalValidator;
        _stateManager = new FlowStateManager(_pending);
        _messageHandler = new FlowMessageHandler(oauthService, userRepo, calendarSync, appointmentRepo, reportService, quickEdit);
        _wizardHandler = new FlowWizardHandler(anesthesiologistSearchService, userRepo, analytics, quickEdit);
        _llmProcessor = new FlowLLMProcessor(llm, quickEdit);
    }

    public async Task HandleAsync(ITelegramBotClient bot, long chatId, string rawText, CancellationToken ct)
    {
        // Manejar comandos especiales primero (sin enviar "Procesando..." ya que el otro servicio lo har√°)
        if (await _messageHandler.HandleSpecialCommandsAsync(bot, chatId, rawText, ct))
        {
            _stateManager.ClearContext(chatId);
            return;
        }
        
        // CR√çTICO: Verificar comando "cancelar" ANTES de todo
        if (IsCancelCommand(rawText))
        {
            Console.WriteLine("[FLOW] üö´ Cancel command detected, clearing context");
            _stateManager.ClearContext(chatId);
            await MessageSender.SendWithRetry(chatId, "‚ùå Operaci√≥n cancelada. Pod√©s empezar de nuevo enviando los datos de tu cirug√≠a.", cancellationToken: ct);
            return;
        }

        // PRIORIDAD: Verificar si QuickEditService puede manejar el texto (estados de edici√≥n)
        if (await _quickEdit.TryHandleTextInputAsync(bot, chatId, rawText, ct))
        {
            // Texto manejado por estado de edici√≥n, no continuar
            return;
        }

        // INMEDIATO: Enviar mensaje de "Procesando..." para reducir ansiedad del usuario
        await MessageSender.SendWithRetry(chatId, "‚è≥ Procesando...", cancellationToken: ct);

        // NUEVA L√ìGICA: Verificar contexto conversacional antes de clasificar intent
        var appt = _stateManager.GetOrCreateAppointment(chatId);
        var currentContext = _contextManager.ExtractContext(appt);
        
        // Si hay contexto activo, verificar relevancia del mensaje
        if (currentContext.Type != ContextType.None)
        {
            var relevance = await _contextManager.AnalyzeMessageRelevanceAsync(rawText, currentContext, ct);
            
            if (!relevance.IsRelevant)
            {
                // Manejar desviaci√≥n de contexto
                if (await _contextManager.HandleContextDeviationAsync(bot, chatId, rawText, currentContext, ct))
                {
                    // Esperar respuesta del usuario sobre si quiere continuar o cambiar
                    return;
                }
            }
            
            // Si debe saltear intent classification, ir directo al wizard/confirmaci√≥n
            if (_contextManager.ShouldBypassIntentClassification(rawText, currentContext))
            {
                await HandleWithActiveContext(bot, chatId, rawText, appt, currentContext, ct);
                return;
            }
        }

        // 1. CLASIFICAR INTENT del mensaje (solo si no hay contexto activo o es cambio expl√≠cito)
        var intent = await _llmProcessor.ClassifyIntentAsync(rawText);
        
        // 2. Manejar intents de modificaci√≥n
        if (intent == MessageIntent.ModifySurgery)
        {
            await HandleModificationAsync(bot, chatId, rawText, ct);
            return;
        }
        
        // 3. Manejar intents de cancelaci√≥n
        if (intent == MessageIntent.CancelSurgery)
        {
            await HandleCancellationAsync(bot, chatId, rawText, ct);
            return;
        }
        
        // 4. Manejar intents de consulta
        if (intent == MessageIntent.QuerySurgery)
        {
            await HandleQueryAsync(bot, chatId, rawText, ct);
            return;
        }

        // El appointment ya fue obtenido arriba para an√°lisis de contexto
        appt.HistoricoInputs.Add(rawText);

        // Manejar continuaci√≥n despu√©s de warning de validaci√≥n
        if (!string.IsNullOrEmpty(appt.ValidationWarning) && 
            rawText.Trim().ToLowerInvariant() is "continuar" or "ok" or "contin√∫ar" or "si" or "s√≠")
        {
            Console.WriteLine("[FLOW] User confirmed to continue after validation warning");
            // Limpiar el warning y continuar con el flujo normal
            appt.ValidationWarning = null;
            // El input original est√° en HistoricoInputs[^2] (pen√∫ltimo)
            if (appt.HistoricoInputs.Count >= 2)
            {
                var originalInput = appt.HistoricoInputs[^2];
                Console.WriteLine($"[FLOW] Continuing with original input: {originalInput}");
                // Procesar el input original sin validaciones
                await _llmProcessor.ProcessWithLLM(bot, appt, originalInput, chatId, ct);
                return;
            }
        }

        // Manejar captura de email del anestesi√≥logo
        if (await HandleEmailCapture(bot, appt, rawText, chatId, ct))
        {
            // Si el appointment est√° listo para limpieza, limpiar el contexto
            if (appt.ReadyForCleanup)
            {
                Console.WriteLine("[FLOW] Appointment ready for cleanup after email handling - clearing context");
                _stateManager.ClearContext(chatId);
            }
            return;
        }

        // Manejar confirmaci√≥n
        if (await HandleConfirmationFlow(bot, appt, rawText, chatId, ct))
        {
            return;
        }

        // Manejar modo edici√≥n
        if (await _messageHandler.HandleEditMode(bot, appt, rawText, chatId, ct, _llmProcessor))
        {
            return;
        }

        Console.WriteLine($"[FLOW] Before wizard - CampoQueFalta={appt.CampoQueFalta}, ConfirmacionPendiente={appt.ConfirmacionPendiente}");
        
        // Manejar wizard de campos
        if (await _wizardHandler.HandleFieldWizard(bot, appt, rawText, chatId, ct))
        {
            Console.WriteLine("[FLOW] Wizard handled the message - returning");
            return;
        }
        
        Console.WriteLine("[FLOW] Wizard did not handle - checking direct changes");

        // Manejar cambios directos
        if (await _messageHandler.HandleDirectChanges(bot, appt, rawText, chatId, ct, _llmProcessor))
        {
            Console.WriteLine("[FLOW] Direct changes handled - returning");
            return;
        }

        Console.WriteLine("[FLOW] Going to LLM - no other handler processed the message");
        
        // VALIDACI√ìN: Verificar si el texto tiene contexto m√©dico relevante
        if (!await _medicalValidator.HasMedicalContextAsync(rawText, ct))
        {
            Console.WriteLine($"[FLOW] ‚ùå Non-medical context detected: {rawText}");
            
            // Si es texto claramente inconexo (como "perro verde"), dar mensaje espec√≠fico
            if (_medicalValidator.IsDisconnectedWords(rawText))
            {
                var specificMessage = _medicalValidator.GenerateNonMedicalMessage(rawText);
                await MessageSender.SendWithRetry(chatId, specificMessage, cancellationToken: ct);
            }
            else
            {
                // Para otros casos, mostrar ayuda general
                var helpMessage = _medicalValidator.GenerateHelpMessage();
                await MessageSender.SendWithRetry(chatId, helpMessage, cancellationToken: ct);
            }
            
            // Limpiar contexto para empezar de nuevo
            _stateManager.ClearContext(chatId);
            return;
        }
        
        // CR√çTICO: Verificar intenciones de modificaci√≥n ANTES de asumir que es nuevo registro
        // Esto previene que "quiero cambiar..." sea procesado como nueva cirug√≠a
        if (IsModificationIntent(rawText))
        {
            Console.WriteLine("[FLOW] üîß Modification intent detected, routing to HandleModificationAsync");
            await HandleModificationAsync(bot, chatId, rawText, ct);
            return;
        }

        // NUEVO: Detectar m√∫ltiples cirug√≠as ANTES del procesamiento LLM con validaciones completas
        if (appt.HistoricoInputs.Count == 1) // Solo para el primer input del usuario
        {
            Console.WriteLine("[FLOW] First user input - checking for multiple surgeries with validation");
            
            // Obtener perfil del usuario para acceso a listas de referencia
            var profile = await _userRepo.GetAsync(chatId, ct);
            // TODO: Implementar GetListasReferencia() en UserProfile cuando sea necesario
            var listasObj = (object?)null; // Por ahora null, el sistema funcionar√° sin listas espec√≠ficas
            var referenceDate = DateTime.Now;
            
            var parseResult = await _multiSurgeryParser.ParseInputAsync(rawText, referenceDate, listasObj, chatId);
            
            // Manejar problemas de validaci√≥n seg√∫n severidad
            if (parseResult.ValidationStatus == "error" || 
                (parseResult.ValidationStatus == "warning" && parseResult.NeedsClarification))
            {
                Console.WriteLine($"[FLOW] ‚ö†Ô∏è Validation issues found: {parseResult.ValidationStatus}");
                
                // Enviar respuesta de validaci√≥n al usuario
                var responseMessage = parseResult.SuggestedResponse ?? "No entiendo ese tipo de mensaje. ¬øPodr√≠as ser m√°s espec√≠fico?";
                
                // Para warnings, agregar opci√≥n de continuar
                if (parseResult.ValidationStatus == "warning")
                {
                    responseMessage += "\n\nüí° Si quer√©s continuar de todas formas, escrib√≠ 'continuar' o 'ok'.";
                }
                
                // Agregar informaci√≥n de problemas espec√≠ficos si los hay
                if (parseResult.Issues.Any())
                {
                    var issueMessages = string.Join("\n", parseResult.Issues.Select(i => $"‚Ä¢ {i.Message}"));
                    responseMessage += $"\n\n{issueMessages}";
                }
                
                await MessageSender.SendWithRetry(chatId, responseMessage, cancellationToken: ct);
                
                // Para errors: limpiar contexto inmediatamente
                // Para warnings: guardar estado para permitir continuar si el usuario confirma
                if (parseResult.ValidationStatus == "error")
                {
                    _stateManager.ClearContext(chatId);
                }
                else
                {
                    // Guardar el parseResult en el appointment para manejarlo en la pr√≥xima iteraci√≥n
                    appt.ValidationWarning = parseResult.SuggestedResponse;
                }
                
                return;
            }
            
            if (parseResult.IsMultiple)
            {
                Console.WriteLine($"[FLOW] ‚úÖ Multiple surgeries detected at start: {parseResult.IndividualInputs.Count} surgeries");
                
                // GUARDAR la informaci√≥n de m√∫ltiples cirug√≠as en el appointment
                appt.Notas = $"MULTIPLE_DETECTED:{parseResult.IndividualInputs.Count}|" + 
                            string.Join("|", parseResult.DetectedSurgeries.Select(s => $"{s.Quantity}:{s.SurgeryName}"));
                
                Console.WriteLine($"[FLOW] Saved multiple surgery info in Notas: {appt.Notas}");
                
                // Contin√∫ar con flujo normal para completar datos faltantes
                // La detecci√≥n se aplicar√° cuando todo est√© completo
            }
            else
            {
                Console.WriteLine("[FLOW] Single surgery detected - proceeding normally");
            }
        }
        
        // Procesar con LLM para casos nuevos (primero completar todos los datos)
        await _llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
    }

    private async Task<bool> HandleConfirmationFlow(ITelegramBotClient bot, Appointment appt, string rawText, long chatId, CancellationToken ct)
    {
        var inputLower = rawText.Trim().ToLowerInvariant();
        
        // NUEVO: Verificar si es una confirmaci√≥n de modificaci√≥n
        if (appt.ModificationContext?.IsAwaitingConfirmation == true)
        {
            if (inputLower is "si" or "s√≠" or "ok" or "dale" or "confirmo" or "confirmar")
            {
                // Ejecutar la modificaci√≥n usando el appointment modificado completo
                if (appt.ModificationContext.ModifiedAppointment != null)
                {
                    var success = await _updateCoordinator.ExecuteDirectModificationAsync(
                        appt.ModificationContext.OriginalAppointment!, 
                        appt.ModificationContext.ModifiedAppointment!, 
                        chatId, 
                        ct);
                }
                else
                {
                    // Fallback al m√©todo anterior si no hay ModifiedAppointment
                    var success = await _updateCoordinator.ExecuteModificationAsync(
                        appt.ModificationContext.OriginalAppointment!, 
                        appt.ModificationContext.RequestedChanges!, 
                        chatId, 
                        ct);
                }
                
                // Limpiar contexto
                appt.ModificationContext = null;
                _stateManager.ClearContext(chatId);
                
                return true;
            }
            else if (inputLower.StartsWith("no"))
            {
                await MessageSender.SendWithRetry(chatId,
                    "‚ùå Modificaci√≥n cancelada. Los datos originales se mantienen sin cambios.",
                    cancellationToken: ct);
                
                appt.ModificationContext = null;
                _stateManager.ClearContext(chatId);
                
                return true;
            }
            
            // Si no es ni s√≠ ni no, pedir confirmaci√≥n clara
            await MessageSender.SendWithRetry(chatId,
                "‚ùì Por favor confirma con 's√≠' o 'no' si quer√©s realizar estos cambios.",
                cancellationToken: ct);
            
            return true;
        }
        
        // Verificar si es una confirmaci√≥n de m√∫ltiples cirug√≠as
        if (appt.ConfirmacionPendiente && !string.IsNullOrWhiteSpace(appt.Notas) && 
            appt.Notas.StartsWith("MARKER_MULTIPLE_SURGERIES:"))
        {
            if (inputLower is "si" or "s√≠" or "ok" or "dale" or "confirmo" or "confirmar" or "confirmar todas")
            {
                await HandleMultipleConfirmation(bot, appt, chatId, ct);
                return true;
            }
            else if (inputLower.StartsWith("no") || IsMultipleSurgeryEditCommand(rawText))
            {
                await HandleMultipleSurgeryEdit(bot, appt, rawText, chatId, ct);
                return true;
            }
        }
        
        // Primero dejar que el handler maneje la l√≥gica b√°sica de confirmaci√≥n
        if (await _messageHandler.HandleConfirmationAsync(bot, appt, rawText, chatId, ct))
        {
            // Si era una confirmaci√≥n positiva y ya no est√° pendiente, verificar si hay m√∫ltiples cirug√≠as
            if (appt.ConfirmacionPendiente == false && inputLower is "si" or "s√≠" or "ok" or "dale" or "confirmo" or "confirmar")
            {
                // NUEVO: Verificar si hab√≠amos detectado m√∫ltiples cirug√≠as anteriormente
                if (!string.IsNullOrEmpty(appt.Notas) && appt.Notas.StartsWith("MULTIPLE_DETECTED:"))
                {
                    Console.WriteLine($"[FLOW] Found saved multiple surgery info: {appt.Notas}");
                    
                    // Parsear la informaci√≥n guardada
                    var parseResult = ParseSavedMultipleSurgeryInfo(appt.Notas, appt.HistoricoInputs[0]);
                    
                    if (parseResult.IsMultiple)
                    {
                        Console.WriteLine($"[FLOW] Processing saved multiple surgeries after validation: {parseResult.IndividualInputs.Count} surgeries");
                        
                        // Limpiar el contexto actual antes de procesar m√∫ltiples
                        _stateManager.ClearContext(chatId);
                        
                        // Procesar m√∫ltiples cirug√≠as con todos los datos ya validados
                        await HandleMultipleSurgeriesAfterValidation(bot, parseResult, appt, chatId, ct);
                    }
                    else
                    {
                        // Fallback a procesamiento normal
                        await _confirmationService.ProcessConfirmationAsync(bot, appt, chatId, ct);
                        
                        // Solo limpiar contexto si no est√° esperando email del anestesi√≥logo
                        if (appt.CampoQueFalta != Appointment.CampoPendiente.EsperandoEmailAnestesiologo)
                        {
                            _stateManager.ClearContext(chatId);
                        }
                    }
                }
                else
                {
                    // Procesar confirmaci√≥n normal (una sola cirug√≠a)
                    await _confirmationService.ProcessConfirmationAsync(bot, appt, chatId, ct);
                    
                    // Solo limpiar contexto si no est√° esperando email del anestesi√≥logo
                    if (appt.CampoQueFalta != Appointment.CampoPendiente.EsperandoEmailAnestesiologo)
                    {
                        _stateManager.ClearContext(chatId);
                    }
                }
            }
            return true;
        }
        return false;
    }

    private async Task HandleMultipleSurgeriesFromStart(ITelegramBotClient bot, MultiSurgeryParser.ParseResult parseResult, long chatId, CancellationToken ct)
    {
        try
        {
            Console.WriteLine($"[FLOW] Starting multiple surgery processing from the beginning with {parseResult.IndividualInputs.Count} surgeries");
            
            await MessageSender.SendWithRetry(chatId, 
                $"üîç **Detect√© {parseResult.IndividualInputs.Count} cirug√≠as diferentes:**\n" +
                string.Join("\n", parseResult.DetectedSurgeries.Select((s, i) => $"{i + 1}. {s.Quantity} {s.SurgeryName}")) + 
                "\n\n‚ö° Procesando cada cirug√≠a por separado...", 
                cancellationToken: ct);

            var appointments = new List<Appointment>();
            
            // Procesar cada cirug√≠a individualmente
            for (int i = 0; i < parseResult.IndividualInputs.Count; i++)
            {
                var individualInput = parseResult.IndividualInputs[i];
                var surgeryInfo = parseResult.DetectedSurgeries[i];
                
                Console.WriteLine($"[FLOW] Processing surgery {i + 1}: {individualInput}");
                
                // Crear un chatId temporal √∫nico para cada cirug√≠a
                var tempChatId = chatId + (i + 1) * 10000; // Offset para evitar conflictos
                var tempAppt = _stateManager.GetOrCreateAppointment(tempChatId);
                tempAppt.HistoricoInputs.Add(individualInput);
                
                // Procesar con LLM individual
                await _llmProcessor.ProcessWithLLM(bot, tempAppt, individualInput, tempChatId, ct);
                
                appointments.Add(tempAppt);
            }
            
            // Crear marcador para el flujo de confirmaci√≥n m√∫ltiple
            var markerAppt = _stateManager.GetOrCreateAppointment(chatId);
            markerAppt.ConfirmacionPendiente = true;
            markerAppt.Notas = $"MULTIPLE_SURGERIES:{parseResult.IndividualInputs.Count}";
            
            Console.WriteLine($"[FLOW] Multiple surgery processing initiated for {parseResult.IndividualInputs.Count} surgeries");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FLOW] Error in HandleMultipleSurgeriesFromStart: {ex}");
            await MessageSender.SendWithRetry(chatId, 
                "‚ùå Error procesando m√∫ltiples cirug√≠as. Intenta nuevamente.", 
                cancellationToken: ct);
        }
    }
    
    private MultiSurgeryParser.ParseResult ParseSavedMultipleSurgeryInfo(string notas, string originalInput)
    {
        try
        {
            // Formato: "MULTIPLE_DETECTED:2|1:HAVA|2:CERS"
            var parts = notas.Split('|');
            if (parts.Length < 2 || !parts[0].StartsWith("MULTIPLE_DETECTED:"))
            {
                return new MultiSurgeryParser.ParseResult { IsMultiple = false, IndividualInputs = new List<string> { originalInput } };
            }
            
            var countStr = parts[0].Substring("MULTIPLE_DETECTED:".Length);
            if (!int.TryParse(countStr, out var count))
            {
                return new MultiSurgeryParser.ParseResult { IsMultiple = false, IndividualInputs = new List<string> { originalInput } };
            }
            
            var surgeries = new List<MultiSurgeryParser.SurgeryInfo>();
            var individualInputs = new List<string>();
            
            // Extraer contexto base del input original (sin las cirug√≠as)
            var baseContext = ExtractBaseContextFromOriginalInput(originalInput);
            
            for (int i = 1; i < parts.Length && i <= count; i++)
            {
                var surgeryPart = parts[i];
                var surgeryData = surgeryPart.Split(':');
                if (surgeryData.Length == 2 && int.TryParse(surgeryData[0], out var quantity))
                {
                    var surgeryName = surgeryData[1];
                    surgeries.Add(new MultiSurgeryParser.SurgeryInfo
                    {
                        Quantity = quantity,
                        SurgeryName = surgeryName,
                        OriginalText = $"{quantity} {surgeryName}"
                    });
                    
                    // Crear input individual con contexto base
                    individualInputs.Add($"{quantity} {surgeryName} {baseContext}".Trim());
                }
            }
            
            Console.WriteLine($"[FLOW] Parsed {surgeries.Count} surgeries from saved info");
            
            return new MultiSurgeryParser.ParseResult
            {
                IsMultiple = surgeries.Count > 1,
                OriginalInput = originalInput,
                IndividualInputs = individualInputs,
                DetectedSurgeries = surgeries
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FLOW] Error parsing saved multiple surgery info: {ex}");
            return new MultiSurgeryParser.ParseResult { IsMultiple = false, IndividualInputs = new List<string> { originalInput } };
        }
    }
    
    private string ExtractBaseContextFromOriginalInput(string originalInput)
    {
        // Remover patrones conocidos de m√∫ltiples cirug√≠as del input original
        var patterns = new[]
        {
            @"\d+\s+[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+\s+y\s+\d+\s+[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+",
            @"\d+\s+[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+\s*\+\s*\d+\s+[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+",
            @"[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+\s*x\s*\d+\s*,\s*[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+\s*x\s*\d+",
            @"\d+\s*x\s*[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+\s*,\s*\d+\s*x\s*[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√±√ë]+"
        };
        
        var baseContext = originalInput;
        
        foreach (var pattern in patterns)
        {
            baseContext = System.Text.RegularExpressions.Regex.Replace(baseContext, pattern, "", RegexOptions.IgnoreCase);
        }
        
        // Limpiar espacios m√∫ltiples
        baseContext = System.Text.RegularExpressions.Regex.Replace(baseContext, @"\s+", " ").Trim();
        
        Console.WriteLine($"[FLOW] Extracted base context: '{baseContext}' from '{originalInput}'");
        return baseContext;
    }

    private async Task HandleMultipleConfirmation(ITelegramBotClient bot, Appointment markerAppt, long chatId, CancellationToken ct)
    {
        try
        {
            // Extraer n√∫mero de cirug√≠as del marker
            var parts = markerAppt.Notas?.Split(':');
            if (parts == null || parts.Length < 2)
            {
                await MessageSender.SendWithRetry(chatId, "‚ùå Error procesando confirmaci√≥n m√∫ltiple - formato inv√°lido.", cancellationToken: ct);
                return;
            }
            var countStr = parts[1];
            if (!int.TryParse(countStr, out var surgeryCount))
            {
                await MessageSender.SendWithRetry(chatId, "‚ùå Error procesando confirmaci√≥n m√∫ltiple.", cancellationToken: ct);
                return;
            }

            var successCount = 0;
            var errors = new List<string>();
            var confirmedSurgeries = new List<string>();
            var emailRequests = new List<string>();

            // Procesar cada cirug√≠a guardada SILENCIOSAMENTE
            for (int i = 1; i <= surgeryCount; i++)
            {
                try
                {
                    var tempChatId = chatId + i * 100;
                    var savedAppt = _stateManager.GetOrCreateAppointment(tempChatId);
                    
                    if (!string.IsNullOrWhiteSpace(savedAppt.Cirugia))
                    {
                        // Procesar confirmaci√≥n sin enviar mensajes individuales (modo silencioso)
                        var success = await _confirmationService.ProcessConfirmationAsync(bot, savedAppt, chatId, ct, silent: true);
                        
                        if (success)
                        {
                            successCount++;
                            confirmedSurgeries.Add($"‚úÖ **{savedAppt.Cantidad} {savedAppt.Cirugia?.ToUpper()}**");
                            
                            // Si hay anestesi√≥logo sin email, agregar a lista de pendientes
                            if (!string.IsNullOrWhiteSpace(savedAppt.Anestesiologo) && 
                                savedAppt.CampoQueFalta == Appointment.CampoPendiente.EsperandoEmailAnestesiologo)
                            {
                                emailRequests.Add($"‚Ä¢ {savedAppt.Anestesiologo}");
                            }
                        }
                        else
                        {
                            errors.Add($"Cirug√≠a {i}: {savedAppt.Cirugia}");
                        }
                    }
                    
                    // Limpiar contexto temporal
                    _stateManager.ClearContext(tempChatId);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[MULTI-CONFIRM] Error confirming surgery {i}: {ex}");
                    errors.Add($"Cirug√≠a {i}");
                }
            }

            // MENSAJE CONSOLIDADO √öNICO
            var finalMessage = $"üéâ **¬°{successCount} cirug√≠as confirmadas exitosamente!**\n\n";
            
            // Lista de cirug√≠as confirmadas
            finalMessage += string.Join("\n", confirmedSurgeries);
            
            // Informaci√≥n adicional
            finalMessage += "\n\nüìÖ **Eventos creados en Google Calendar con recordatorio de 24hs**";
            finalMessage += "\nüíæ **Guardadas en la base de datos**";
            
            // Si hay emails pendientes
            if (emailRequests.Count > 0)
            {
                finalMessage += "\n\nüìß **Emails pendientes para anestesi√≥logos:**\n";
                finalMessage += string.Join("\n", emailRequests);
                finalMessage += "\n\nüí° Pod√©s enviarme los emails o escribir 'saltar' para omitir.";
            }
            
            // Si hubo errores
            if (errors.Count > 0)
            {
                finalMessage += $"\n\n‚ùå **{errors.Count} cirug√≠as fallaron:**\n{string.Join("\n", errors)}";
            }

            await MessageSender.SendWithRetry(chatId, finalMessage, cancellationToken: ct);
            
            // Limpiar contexto principal
            _stateManager.ClearContext(chatId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MULTI-CONFIRM] Error in multiple confirmation: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Error procesando confirmaci√≥n m√∫ltiple. Intenta nuevamente.",
                cancellationToken: ct);
        }
    }

    private bool IsMultipleSurgeryEditCommand(string input)
    {
        var inputLower = input.ToLowerInvariant();
        
        // Patrones de edici√≥n granular
        var editPatterns = new[]
        {
            @"cirug[√≠i]a\s*\d+",           // "cirug√≠a 1", "cirugia 2"
            @"(primera|segunda|tercera)\s+cirug[√≠i]a",  // "primera cirug√≠a"
            @"(cers|mld|adenoides|am[√≠i]gdalas)",       // nombres de cirug√≠as
            @"modificar|cambiar|editar",                 // comandos de edici√≥n
            @"(hora|lugar|cirujano|aneste|cantidad)\s", // campos a modificar
            @"la\s+(primera|segunda|tercera|√∫ltima)"     // "la primera", "la segunda"
        };

        return editPatterns.Any(pattern => 
            System.Text.RegularExpressions.Regex.IsMatch(inputLower, pattern));
    }

    private async Task HandleMultipleSurgeryEdit(ITelegramBotClient bot, Appointment markerAppt, string editCommand, long chatId, CancellationToken ct)
    {
        try
        {
            // Extraer n√∫mero de cirug√≠as del marker
            var countStr = markerAppt.Notas?.Split(':')[1];
            if (!int.TryParse(countStr, out var surgeryCount))
            {
                await MessageSender.SendWithRetry(chatId, "‚ùå Error procesando edici√≥n m√∫ltiple.", cancellationToken: ct);
                return;
            }

            // Cargar todas las cirug√≠as guardadas
            var surgeries = new List<Appointment>();
            for (int i = 1; i <= surgeryCount; i++)
            {
                var tempChatId = chatId + i * 100;
                var savedAppt = _stateManager.GetOrCreateAppointment(tempChatId);
                if (!string.IsNullOrWhiteSpace(savedAppt.Cirugia))
                {
                    savedAppt.Notas = $"Cirug√≠a {i}"; // Para identificaci√≥n
                    surgeries.Add(savedAppt);
                }
            }

            if (surgeries.Count == 0)
            {
                await MessageSender.SendWithRetry(chatId, "‚ùå No se encontraron cirug√≠as para editar.", cancellationToken: ct);
                return;
            }

            // Parsear comando de edici√≥n
            var editResult = ParseMultipleSurgeryEditCommand(editCommand, surgeries);

            if (editResult.Success)
            {
                // Aplicar la edici√≥n
                await ApplyMultipleSurgeryEdit(bot, editResult, surgeries, chatId, ct);
            }
            else
            {
                // Mostrar opciones de edici√≥n disponibles
                await ShowMultipleSurgeryEditOptions(bot, surgeries, chatId, ct);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MULTI-EDIT] Error handling multiple surgery edit: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Error procesando edici√≥n. Intenta nuevamente.",
                cancellationToken: ct);
        }
    }

    private MultiSurgeryEditResult ParseMultipleSurgeryEditCommand(string editCommand, List<Appointment> surgeries)
    {
        var inputLower = editCommand.ToLowerInvariant();
        var result = new MultiSurgeryEditResult();

        try
        {
            // Patron 1: "cirug√≠a 2 hora 16hs"
            var pattern1 = @"cirug[√≠i]a\s*(\d+)\s+(\w+)\s+(.+)";
            var match1 = System.Text.RegularExpressions.Regex.Match(inputLower, pattern1);
            if (match1.Success)
            {
                var surgeryIndex = int.Parse(match1.Groups[1].Value) - 1; // Convert to 0-based
                var fieldName = match1.Groups[2].Value;
                var newValue = match1.Groups[3].Value;

                if (surgeryIndex >= 0 && surgeryIndex < surgeries.Count)
                {
                    result.Success = true;
                    result.SurgeryIndex = surgeryIndex;
                    result.FieldName = MapFieldName(fieldName);
                    result.NewValue = newValue;
                    return result;
                }
            }

            // Patr√≥n 2: "MLD hora 16hs" (por nombre de cirug√≠a)
            var pattern2 = @"(cers|mld|adenoides|am[√≠i]gdalas|amigdalas)\s+(\w+)\s+(.+)";
            var match2 = System.Text.RegularExpressions.Regex.Match(inputLower, pattern2);
            if (match2.Success)
            {
                var surgeryName = match2.Groups[1].Value;
                var fieldName = match2.Groups[2].Value;
                var newValue = match2.Groups[3].Value;

                // Buscar cirug√≠a por nombre
                for (int i = 0; i < surgeries.Count; i++)
                {
                    if (surgeries[i].Cirugia?.ToLowerInvariant().Contains(surgeryName) == true)
                    {
                        result.Success = true;
                        result.SurgeryIndex = i;
                        result.FieldName = MapFieldName(fieldName);
                        result.NewValue = newValue;
                        return result;
                    }
                }
            }

            // Patr√≥n 3: "primera cirug√≠a lugar Hospital"
            var pattern3 = @"(primera|segunda|tercera)\s+cirug[√≠i]a\s+(\w+)\s+(.+)";
            var match3 = System.Text.RegularExpressions.Regex.Match(inputLower, pattern3);
            if (match3.Success)
            {
                var position = match3.Groups[1].Value;
                var fieldName = match3.Groups[2].Value;
                var newValue = match3.Groups[3].Value;

                var surgeryIndex = position switch
                {
                    "primera" => 0,
                    "segunda" => 1,
                    "tercera" => 2,
                    _ => -1
                };

                if (surgeryIndex >= 0 && surgeryIndex < surgeries.Count)
                {
                    result.Success = true;
                    result.SurgeryIndex = surgeryIndex;
                    result.FieldName = MapFieldName(fieldName);
                    result.NewValue = newValue;
                    return result;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MULTI-EDIT] Error parsing edit command: {ex}");
        }

        return result;
    }

    private string MapFieldName(string fieldName)
    {
        return fieldName.ToLowerInvariant() switch
        {
            "hora" or "tiempo" => "hora",
            "fecha" => "fecha", 
            "lugar" or "hospital" or "clinica" => "lugar",
            "cirujano" or "doctor" or "medico" => "cirujano",
            "aneste" or "anestesiologo" or "anestesiologist" => "anestesiologo",
            "cantidad" or "qty" => "cantidad",
            _ => fieldName.ToLowerInvariant()
        };
    }

    private async Task ApplyMultipleSurgeryEdit(ITelegramBotClient bot, MultiSurgeryEditResult editResult, List<Appointment> surgeries, long chatId, CancellationToken ct)
    {
        try
        {
            var targetSurgery = surgeries[editResult.SurgeryIndex];
            var oldValue = "";
            var fieldDisplayName = "";

            // Aplicar la edici√≥n seg√∫n el campo
            switch (editResult.FieldName)
            {
                case "hora":
                    oldValue = targetSurgery.FechaHora?.ToString("HH:mm") ?? "sin definir";
                    if (TryParseTime(editResult.NewValue, out var newTime))
                    {
                        var baseDate = targetSurgery.FechaHora?.Date ?? DateTime.Today;
                        targetSurgery.FechaHora = baseDate.Add(newTime);
                        fieldDisplayName = "Hora";
                    }
                    else
                    {
                        await MessageSender.SendWithRetry(chatId, $"‚ùå Formato de hora inv√°lido: {editResult.NewValue}", cancellationToken: ct);
                        return;
                    }
                    break;

                case "lugar":
                    oldValue = targetSurgery.Lugar ?? "sin definir";
                    targetSurgery.Lugar = editResult.NewValue;
                    fieldDisplayName = "Lugar";
                    break;

                case "cirujano":
                    oldValue = targetSurgery.Cirujano ?? "sin definir";
                    targetSurgery.Cirujano = editResult.NewValue;
                    fieldDisplayName = "Cirujano";
                    break;

                case "anestesiologo":
                    oldValue = targetSurgery.Anestesiologo ?? "sin definir";
                    targetSurgery.Anestesiologo = editResult.NewValue;
                    fieldDisplayName = "Anestesi√≥logo";
                    break;

                case "cantidad":
                    oldValue = targetSurgery.Cantidad?.ToString() ?? "sin definir";
                    if (int.TryParse(editResult.NewValue, out var newQty))
                    {
                        targetSurgery.Cantidad = newQty;
                        fieldDisplayName = "Cantidad";
                    }
                    else
                    {
                        await MessageSender.SendWithRetry(chatId, $"‚ùå Cantidad inv√°lida: {editResult.NewValue}", cancellationToken: ct);
                        return;
                    }
                    break;

                default:
                    await MessageSender.SendWithRetry(chatId, $"‚ùå Campo no reconocido: {editResult.FieldName}", cancellationToken: ct);
                    return;
            }

            // Guardar la cirug√≠a modificada
            var tempChatId = chatId + (editResult.SurgeryIndex + 1) * 100;
            _stateManager.SetAppointment(tempChatId, targetSurgery);

            // Confirmar la edici√≥n
            await MessageSender.SendWithRetry(chatId,
                $"‚úÖ **Cirug√≠a {editResult.SurgeryIndex + 1}** modificada:\n" +
                $"üîπ {fieldDisplayName}: `{oldValue}` ‚Üí `{editResult.NewValue}`\n\n" +
                $"üìã **{targetSurgery.Cantidad} {targetSurgery.Cirugia?.ToUpper()}**\n" +
                $"üìÖ {targetSurgery.FechaHora:dddd, dd MMMM yyyy HH:mm}\n" +
                $"üè• {targetSurgery.Lugar}\n" +
                $"üë®‚Äç‚öïÔ∏è {targetSurgery.Cirujano}\n" +
                $"üíâ {targetSurgery.Anestesiologo}",
                cancellationToken: ct);

            // Mostrar resumen actualizado
            await ShowUpdatedMultipleSurgeriesSummary(bot, chatId, ct);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MULTI-EDIT] Error applying edit: {ex}");
            await MessageSender.SendWithRetry(chatId, "‚ùå Error aplicando la edici√≥n.", cancellationToken: ct);
        }
    }

    private bool TryParseTime(string timeStr, out TimeSpan time)
    {
        time = TimeSpan.Zero;
        
        try
        {
            // Limpiar y normalizar
            timeStr = timeStr.ToLowerInvariant()
                            .Replace("hs", "")
                            .Replace("h", "")
                            .Replace(".", ":")
                            .Trim();

            // Intentar parsear directamente
            if (TimeSpan.TryParse(timeStr, out time))
                return true;

            // Intentar formato de una sola cifra (ej: "14" -> "14:00")
            if (int.TryParse(timeStr, out var hour) && hour >= 0 && hour <= 23)
            {
                time = new TimeSpan(hour, 0, 0);
                return true;
            }

            return false;
        }
        catch
        {
            return false;
        }
    }

    private async Task ShowMultipleSurgeryEditOptions(ITelegramBotClient bot, List<Appointment> surgeries, long chatId, CancellationToken ct)
    {
        var message = "‚úèÔ∏è **OPCIONES DE EDICI√ìN**\n\n" +
                     "üìã **Cirug√≠as actuales:**\n";

        for (int i = 0; i < surgeries.Count; i++)
        {
            var surgery = surgeries[i];
            message += $"**{i + 1}. {surgery.Cantidad} {surgery.Cirugia?.ToUpper()}**\n" +
                      $"   üìÖ {surgery.FechaHora:HH:mm} - üè• {surgery.Lugar}\n" +
                      $"   üë®‚Äç‚öïÔ∏è {surgery.Cirujano} - üíâ {surgery.Anestesiologo}\n\n";
        }

        message += "üõ†Ô∏è **Comandos de edici√≥n:**\n" +
                   "‚Ä¢ `cirug√≠a 1 hora 16hs` - Cambiar hora de cirug√≠a espec√≠fica\n" +
                   "‚Ä¢ `MLD lugar Hospital Italiano` - Cambiar por nombre\n" +
                   "‚Ä¢ `primera cirug√≠a anestesi√≥logo L√≥pez` - Cambiar por posici√≥n\n" +
                   "‚Ä¢ `CERS cirujano Rodriguez` - Cambiar por tipo\n\n" +
                   "üìù **Campos editables:** hora, lugar, cirujano, anestesiologo, cantidad";

        await MessageSender.SendWithRetry(chatId, message, cancellationToken: ct);
    }

    private async Task ShowUpdatedMultipleSurgeriesSummary(ITelegramBotClient bot, long chatId, CancellationToken ct)
    {
        // Obtener el marker para saber cu√°ntas cirug√≠as hay
        var markerAppt = _stateManager.GetOrCreateAppointment(chatId);
        if (string.IsNullOrWhiteSpace(markerAppt.Notas) || !markerAppt.Notas.StartsWith("MARKER_MULTIPLE_SURGERIES:"))
            return;

        var countStr = markerAppt.Notas.Split(':')[1];
        if (!int.TryParse(countStr, out var surgeryCount))
            return;

        var summary = "üìã **RESUMEN ACTUALIZADO**\n\n";
        
        for (int i = 1; i <= surgeryCount; i++)
        {
            var tempChatId = chatId + i * 100;
            var surgery = _stateManager.GetOrCreateAppointment(tempChatId);
            
            if (!string.IsNullOrWhiteSpace(surgery.Cirugia))
            {
                summary += $"**{i}. {surgery.Cantidad} {surgery.Cirugia?.ToUpper()}**\n" +
                          $"üìÖ {surgery.FechaHora:dddd, dd MMMM yyyy HH:mm}\n" +
                          $"üè• {surgery.Lugar}\n" +
                          $"üë®‚Äç‚öïÔ∏è {surgery.Cirujano}\n" +
                          $"üíâ {surgery.Anestesiologo}\n\n";
            }
        }

        summary += "üöÄ **¬øConfirmar TODAS las cirug√≠as?** Responde **'si'** para proceder o edita otra cirug√≠a.";

        await MessageSender.SendWithRetry(chatId, summary, cancellationToken: ct);
    }

    public class MultiSurgeryEditResult
    {
        public bool Success { get; set; }
        public int SurgeryIndex { get; set; }
        public string FieldName { get; set; } = string.Empty;
        public string NewValue { get; set; } = string.Empty;
    }

    private async Task<bool> HandleEmailCapture(ITelegramBotClient bot, Appointment appt, string rawText, long chatId, CancellationToken ct)
    {
        if (appt.CampoQueFalta == Appointment.CampoPendiente.EsperandoEmailAnestesiologo)
        {
            Console.WriteLine($"[FLOW] Handling email capture for: {rawText}");
            return await _confirmationService.HandleEmailResponse(bot, appt, rawText, chatId, ct);
        }
        return false;
    }

    private async Task HandleMultipleSurgeries(ITelegramBotClient bot, MultiSurgeryParser.ParseResult parseResult, long chatId, CancellationToken ct)
    {
        try
        {
            Console.WriteLine($"[MULTI-SURGERY] Processing {parseResult.IndividualInputs.Count} surgeries for chat {chatId}");

            // Informar al usuario que se detectaron m√∫ltiples cirug√≠as
            await MessageSender.SendWithRetry(chatId,
                $"üîç Detect√© {parseResult.IndividualInputs.Count} cirug√≠as diferentes:\n" +
                string.Join("\n", parseResult.DetectedSurgeries.Select((s, i) => $"{i + 1}. {s.Quantity} {s.SurgeryName}")) +
                "\n\nProcesando cada una...",
                cancellationToken: ct);

            var processedAppointments = new List<Appointment>();
            var errors = new List<string>();

            // Procesar cada cirug√≠a individualmente
            for (int i = 0; i < parseResult.IndividualInputs.Count; i++)
            {
                try
                {
                    var individualInput = parseResult.IndividualInputs[i];
                    var surgeryInfo = parseResult.DetectedSurgeries[i];
                    
                    Console.WriteLine($"[MULTI-SURGERY] Processing surgery {i + 1}: {individualInput}");

                    // Crear un contexto temporal para esta cirug√≠a (usar el chatId real)
                    var tempAppt = new Appointment { ChatId = chatId };
                    tempAppt.HistoricoInputs.Add(individualInput);

                    // Procesar con LLM usando el chatId real pero sin guardar en el state manager
                    await ProcessSingleSurgeryWithLLM(bot, tempAppt, individualInput, chatId, ct);

                    // Verificar si el procesamiento fue exitoso
                    if (!string.IsNullOrWhiteSpace(tempAppt.Cirugia))
                    {
                        processedAppointments.Add(tempAppt);
                        
                        await MessageSender.SendWithRetry(chatId,
                            $"‚úÖ Cirug√≠a {i + 1} procesada: {tempAppt.Cantidad} {tempAppt.Cirugia?.ToUpper()}",
                            cancellationToken: ct);
                    }
                    else
                    {
                        errors.Add($"Cirug√≠a {i + 1}: {surgeryInfo.SurgeryName}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[MULTI-SURGERY] Error processing surgery {i + 1}: {ex}");
                    errors.Add($"Cirug√≠a {i + 1}: Error de procesamiento");
                }
            }

            // Mostrar resumen final
            if (processedAppointments.Count > 0)
            {
                await ShowMultipleSurgeriesSummary(bot, processedAppointments, chatId, ct);
            }

            if (errors.Count > 0)
            {
                await MessageSender.SendWithRetry(chatId,
                    $"‚ö†Ô∏è Algunas cirug√≠as no se pudieron procesar:\n{string.Join("\n", errors)}",
                    cancellationToken: ct);
            }

            // Limpiar el contexto original despu√©s de procesar m√∫ltiples cirug√≠as
            _stateManager.ClearContext(chatId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MULTI-SURGERY] Error handling multiple surgeries: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Hubo un error procesando m√∫ltiples cirug√≠as. Por favor, intenta enviar una cirug√≠a a la vez.",
                cancellationToken: ct);
        }
    }

    private async Task ShowMultipleSurgeriesSummary(ITelegramBotClient bot, List<Appointment> appointments, long chatId, CancellationToken ct)
    {
        var summary = "üìã **RESUMEN DE CIRUG√çAS PROCESADAS**\n\n";
        
        for (int i = 0; i < appointments.Count; i++)
        {
            var appt = appointments[i];
            summary += $"**{i + 1}. {appt.Cantidad} {appt.Cirugia?.ToUpper()}**\n" +
                      $"üìÖ {appt.FechaHora:dd/MM/yyyy HH:mm}\n" +
                      $"üè• {appt.Lugar}\n" +
                      $"üë®‚Äç‚öïÔ∏è {appt.Cirujano}\n" +
                      $"üíâ {appt.Anestesiologo}\n\n";
        }

        summary += $"üî• **Total: {appointments.Count} cirug√≠as**\n\n" +
                   "¬øQuer√©s confirmar todas estas cirug√≠as? Responde **'confirmar todas'** o **'si'** para proceder.";

        await MessageSender.SendWithRetry(chatId, summary, cancellationToken: ct);

        // Guardar los appointments para confirmaci√≥n posterior
        // Podr√≠as usar un diccionario temporal o una propiedad del state manager
        foreach (var appt in appointments)
        {
            appt.ConfirmacionPendiente = true;
            // Temporalmente guardamos en contextos con IDs √∫nicos
            var contextId = chatId + (appointments.IndexOf(appt) * 100000);
            _stateManager.SetAppointment(contextId, appt);
        }
    }

    private async Task HandleMultipleSurgeriesAfterValidation(ITelegramBotClient bot, MultiSurgeryParser.ParseResult parseResult, Appointment validatedAppt, long chatId, CancellationToken ct)
    {
        try
        {
            Console.WriteLine($"[MULTI-SURGERY-VALIDATED] Processing {parseResult.DetectedSurgeries.Count} surgeries with validated data");

            // Informar al usuario sobre las m√∫ltiples cirug√≠as detectadas
            await MessageSender.SendWithRetry(chatId,
                $"üîç **¬°Detect√© {parseResult.DetectedSurgeries.Count} cirug√≠as diferentes!**\n\n" +
                string.Join("\n", parseResult.DetectedSurgeries.Select((s, i) => $"{i + 1}. **{s.Quantity} {s.SurgeryName.ToUpper()}**")) +
                "\n\n‚úÖ Todos los datos est√°n completos, creando cada cirug√≠a...",
                cancellationToken: ct);

            var processedAppointments = new List<Appointment>();
            var errors = new List<string>();

            // Crear cada cirug√≠a basada en los datos ya validados
            for (int i = 0; i < parseResult.DetectedSurgeries.Count; i++)
            {
                try
                {
                    var surgeryInfo = parseResult.DetectedSurgeries[i];
                    
                    // Crear nuevo appointment copiando todos los datos validados
                    var newAppt = new Appointment
                    {
                        ChatId = chatId,
                        FechaHora = validatedAppt.FechaHora,
                        Lugar = validatedAppt.Lugar,
                        Cirujano = validatedAppt.Cirujano,
                        Anestesiologo = validatedAppt.Anestesiologo,
                        
                        // Datos espec√≠ficos de esta cirug√≠a
                        Cirugia = surgeryInfo.SurgeryName,
                        Cantidad = surgeryInfo.Quantity,
                        
                        // Notas indicando que es parte de m√∫ltiples cirug√≠as
                        Notas = $"Cirug√≠a {i + 1} de {parseResult.DetectedSurgeries.Count}"
                    };

                    processedAppointments.Add(newAppt);
                    
                    await MessageSender.SendWithRetry(chatId,
                        $"‚úÖ **Cirug√≠a {i + 1}:** {newAppt.Cantidad} {newAppt.Cirugia?.ToUpper()}",
                        cancellationToken: ct);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[MULTI-SURGERY-VALIDATED] Error creating surgery {i + 1}: {ex}");
                    errors.Add($"Cirug√≠a {i + 1}: {parseResult.DetectedSurgeries[i].SurgeryName}");
                }
            }

            // Mostrar resumen final y proceder con confirmaci√≥n
            if (processedAppointments.Count > 0)
            {
                await ShowFinalMultipleSurgeriesSummary(bot, processedAppointments, chatId, ct);
            }

            if (errors.Count > 0)
            {
                await MessageSender.SendWithRetry(chatId,
                    $"‚ö†Ô∏è Algunas cirug√≠as no se pudieron crear:\n{string.Join("\n", errors)}",
                    cancellationToken: ct);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MULTI-SURGERY-VALIDATED] Error handling validated multiple surgeries: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Hubo un error procesando las m√∫ltiples cirug√≠as. Intenta nuevamente.",
                cancellationToken: ct);
        }
    }

    private async Task ShowFinalMultipleSurgeriesSummary(ITelegramBotClient bot, List<Appointment> appointments, long chatId, CancellationToken ct)
    {
        var summary = "üéØ **RESUMEN FINAL DE CIRUG√çAS**\n\n";
        
        for (int i = 0; i < appointments.Count; i++)
        {
            var appt = appointments[i];
            summary += $"**{i + 1}. {appt.Cantidad} {appt.Cirugia?.ToUpper()}**\n" +
                      $"üìÖ {appt.FechaHora:dddd, dd MMMM yyyy HH:mm}\n" +
                      $"üè• {appt.Lugar}\n" +
                      $"üë®‚Äç‚öïÔ∏è {appt.Cirujano}\n" +
                      $"üíâ {appt.Anestesiologo}\n\n";
        }

        summary += $"üî• **Total: {appointments.Count} cirug√≠as programadas**";

        // En lugar de texto simple, usar botones de edici√≥n r√°pida para m√∫ltiples cirug√≠as
        // Nota: Para m√∫ltiples cirug√≠as, por ahora seguimos con el m√©todo tradicional
        // TODO: Implementar botones individuales para cada cirug√≠a
        await MessageSender.SendWithRetry(chatId, summary + "\n\nüöÄ **¬øConfirmar TODAS las cirug√≠as?**\nResponde **'confirmar todas'** o **'si'** para crear todas.", cancellationToken: ct);

        // Guardar todas las cirug√≠as temporalmente para confirmaci√≥n global
        for (int i = 0; i < appointments.Count; i++)
        {
            var appt = appointments[i];
            appt.ConfirmacionPendiente = true;
            
            // Usar IDs √∫nicos para cada cirug√≠a
            var tempChatId = chatId + (i + 1) * 100;
            _stateManager.SetAppointment(tempChatId, appt);
        }

        // Marcar que hay m√∫ltiples cirug√≠as pendientes de confirmaci√≥n
        var markerAppt = new Appointment 
        { 
            ChatId = chatId,
            ConfirmacionPendiente = true,
            Notas = $"MARKER_MULTIPLE_SURGERIES:{appointments.Count}"
        };
        _stateManager.SetAppointment(chatId, markerAppt);
    }

    private async Task ProcessSingleSurgeryWithLLM(ITelegramBotClient bot, Appointment tempAppt, string individualInput, long chatId, CancellationToken ct)
    {
        try
        {
            // NO enviar "Procesando..." aqu√≠ ya que se env√≠a al inicio del flujo principal
            Console.WriteLine($"[LLM-PROCESSOR] Processing input for surgery: {individualInput}");

            // Llamar directamente al LLM sin pasar por el FlowLLMProcessor que env√≠a mensajes
            var llmResponse = await CallLLMDirectly(individualInput);
            
            if (!string.IsNullOrWhiteSpace(llmResponse))
            {
                // Parsear la respuesta del LLM y aplicar al appointment temporal
                ParseLLMResponse(tempAppt, llmResponse);
                Console.WriteLine($"[LLM-PROCESSOR] ‚úÖ Surgery processed successfully");
            }
            else
            {
                Console.WriteLine($"[LLM-PROCESSOR] ‚ùå Empty response from LLM");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LLM-PROCESSOR] Error processing single surgery: {ex}");
            throw; // Re-throw para que el caller maneje el error
        }
    }

    private async Task<string> CallLLMDirectly(string input)
    {
        var startTime = DateTime.UtcNow;
        try
        {
            // Usar el m√©todo que usa assistants (el prompt est√° ya configurado en el assistant)
            var dict = await _llm.ExtractWithPublishedPromptAsync(input, DateTime.Today);
            var duration = DateTime.UtcNow - startTime;
            
            if (dict != null && dict.Count > 0)
            {
                // Log successful parsing
                await _analytics.LogParsingSuccessAsync(input, dict);
                await _analytics.LogParsingPerformanceAsync("llm_extraction", duration, true);
                // Convertir el dictionary a JSON string para parsing
                var jsonParts = new List<string>();
                foreach (var kvp in dict)
                {
                    jsonParts.Add($"\"{kvp.Key}\": \"{kvp.Value?.Replace("\"", "\\\"")}\"");
                }
                
                var jsonResponse = "{" + string.Join(", ", jsonParts) + "}";
                return jsonResponse;
            }
            else
            {
                // Log empty response as warning
                await _analytics.LogParsingWarningAsync("empty_llm_response", input, "LLM returned empty or null response");
                await _analytics.LogParsingPerformanceAsync("llm_extraction", duration, false);
            }
            
            return string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LLM-DIRECT] Error calling LLM: {ex}");
            var duration = DateTime.UtcNow - startTime;
            await _analytics.LogParsingErrorAsync("llm_extraction_exception", input, ex.Message);
            await _analytics.LogParsingPerformanceAsync("llm_extraction", duration, false);
            return string.Empty;
        }
    }

    private void ParseLLMResponse(Appointment appt, string llmResponse)
    {
        try
        {
            // Simple JSON parsing - en production podr√≠as usar System.Text.Json
            var jsonData = llmResponse.Trim();
            if (!jsonData.StartsWith("{") || !jsonData.EndsWith("}"))
            {
                Console.WriteLine("[LLM-PARSER] Response is not valid JSON format");
                return;
            }

            // Extraer campos b√°sicos usando parsing simple
            ExtractJsonField(appt, jsonData, "dia", (value) => {
                if (int.TryParse(value, out var day)) appt.DiaExtraido = day;
            });
            
            ExtractJsonField(appt, jsonData, "mes", (value) => {
                if (int.TryParse(value, out var month)) appt.MesExtraido = month;
            });
            
            ExtractJsonField(appt, jsonData, "anio", (value) => {
                if (int.TryParse(value, out var year)) appt.AnioExtraido = year;
            });
            
            ExtractJsonField(appt, jsonData, "hora", (value) => {
                if (TimeSpan.TryParse(value, out var time)) 
                {
                    appt.HoraExtraida = time.Hours;
                    appt.MinutoExtraido = time.Minutes;
                }
            });
            
            ExtractJsonField(appt, jsonData, "lugar", (value) => appt.Lugar = value);
            ExtractJsonField(appt, jsonData, "cirujano", (value) => appt.Cirujano = value);
            ExtractJsonField(appt, jsonData, "cirugia", (value) => appt.Cirugia = value);
            ExtractJsonField(appt, jsonData, "anestesiologo", (value) => appt.Anestesiologo = value);
            ExtractJsonField(appt, jsonData, "cantidad", (value) => {
                if (int.TryParse(value, out var qty)) appt.Cantidad = qty;
            });
            
            // Intentar completar la fecha/hora si es posible
            appt.TryCompletarFechaHora();
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LLM-PARSER] Error parsing LLM response: {ex}");
        }
    }

    private void ExtractJsonField(Appointment appt, string json, string fieldName, Action<string> setter)
    {
        try
        {
            var pattern = $"\"{fieldName}\"\\s*:\\s*\"([^\"]*?)\"";
            var match = System.Text.RegularExpressions.Regex.Match(json, pattern);
            
            if (match.Success && !string.IsNullOrWhiteSpace(match.Groups[1].Value))
            {
                setter(match.Groups[1].Value.Trim());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LLM-PARSER] Error extracting field {fieldName}: {ex}");
        }
    }

    #region Modification Handlers

    private async Task HandleModificationAsync(ITelegramBotClient bot, long chatId, string rawText, CancellationToken ct)
    {
        try
        {
            // 1. Buscar appointment(s) que coincidan
            var searchResult = await _searchService.FindCandidatesAsync(chatId, rawText, DateTime.Today);
            
            // 2. Manejar casos ambiguos o no encontrados
            if (!await _updateCoordinator.HandleAmbiguousSearch(searchResult, rawText, chatId, ct))
            {
                return;
            }
            
            // 3. Una sola coincidencia encontrada
            var appointment = searchResult.SingleResult!;
            
            // 4. Crear una copia del appointment para procesamiento con LLM
            var appointmentCopia = new Appointment
            {
                // Copiar TODOS los datos del appointment original
                Id = appointment.Id,
                ChatId = appointment.ChatId,
                EquipoId = appointment.EquipoId,
                GoogleEmail = appointment.GoogleEmail,
                FechaHora = appointment.FechaHora,
                Lugar = appointment.Lugar,
                Cirujano = appointment.Cirujano,
                Cirugia = appointment.Cirugia,
                Cantidad = appointment.Cantidad,
                Anestesiologo = appointment.Anestesiologo,
                Notas = appointment.Notas,
                CalendarEventId = appointment.CalendarEventId,
                CalendarSyncedAt = appointment.CalendarSyncedAt,
                ReminderSentAt = appointment.ReminderSentAt,
                ConfirmacionPendiente = false // Para evitar que se procese como nueva cirug√≠a
            };
            
            Console.WriteLine($"[MODIFICATION] Processing modification with LLM for input: {rawText}");
            
            // 5. Procesar modificaci√≥n usando el m√©todo especializado que preserva campos existentes
            await _llmProcessor.ProcessModificationWithLLM(bot, appointmentCopia, rawText, chatId, ct);
            
            // appointmentCopia ahora contiene los datos originales + modificaciones aplicadas
            
            // 6. Mostrar resumen de cambios
            var summary = GenerateModificationSummary(appointment, appointmentCopia);
            summary += "\n\n¬øConfirmar estos cambios? (s√≠/no)";
            
            await MessageSender.SendWithRetry(chatId, summary, cancellationToken: ct);
            
            // 7. Guardar en contexto para confirmaci√≥n
            var modificationContext = new ModificationContext
            {
                OriginalAppointment = appointment,
                ModifiedAppointment = appointmentCopia,
                IsAwaitingConfirmation = true
            };
            
            // Usar el appointment en pending para guardar el contexto
            var contextAppt = _stateManager.GetOrCreateAppointment(chatId);
            contextAppt.ModificationContext = modificationContext;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MODIFICATION] Error: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Hubo un error procesando la modificaci√≥n. Por favor, intenta nuevamente.",
                cancellationToken: ct);
        }
    }

    private async Task HandleCancellationAsync(ITelegramBotClient bot, long chatId, string rawText, CancellationToken ct)
    {
        await MessageSender.SendWithRetry(chatId,
            "üöß La funcionalidad de cancelaci√≥n est√° en desarrollo. Por ahora pod√©s modificar la cirug√≠a o contactar directamente.",
            cancellationToken: ct);
    }

    private string GenerateModificationSummary(Appointment original, Appointment modified)
    {
        var summary = "üìù *Cambios solicitados:*\n\n";
        var hasChanges = false;

        // Comparar fecha y hora
        if (original.FechaHora != modified.FechaHora)
        {
            var originalDateTime = original.FechaHora?.ToString("dd/MM/yyyy HH:mm") ?? "No definida";
            var modifiedDateTime = modified.FechaHora?.ToString("dd/MM/yyyy HH:mm") ?? "No definida";
            summary += $"üìÖ Fecha/Hora: {originalDateTime} ‚Üí *{modifiedDateTime}*\n";
            hasChanges = true;
        }

        // Comparar lugar
        if (original.Lugar != modified.Lugar)
        {
            summary += $"üìç Lugar: {original.Lugar ?? "No definido"} ‚Üí *{modified.Lugar ?? "No definido"}*\n";
            hasChanges = true;
        }

        // Comparar cirujano
        if (original.Cirujano != modified.Cirujano)
        {
            summary += $"üë®‚Äç‚öïÔ∏è Cirujano: {original.Cirujano ?? "No definido"} ‚Üí *{modified.Cirujano ?? "No definido"}*\n";
            hasChanges = true;
        }

        // Comparar cirug√≠a
        if (original.Cirugia != modified.Cirugia)
        {
            summary += $"üè• Cirug√≠a: {original.Cirugia ?? "No definida"} ‚Üí *{modified.Cirugia ?? "No definida"}*\n";
            hasChanges = true;
        }

        // Comparar cantidad
        if (original.Cantidad != modified.Cantidad)
        {
            summary += $"üî¢ Cantidad: {original.Cantidad} ‚Üí *{modified.Cantidad}*\n";
            hasChanges = true;
        }

        // Comparar anestesi√≥logo
        if (original.Anestesiologo != modified.Anestesiologo)
        {
            summary += $"üíâ Anestesi√≥logo: {original.Anestesiologo ?? "No definido"} ‚Üí *{modified.Anestesiologo ?? "No definido"}*\n";
            hasChanges = true;
        }

        if (!hasChanges)
        {
            summary = "‚ÑπÔ∏è No se detectaron cambios en los datos de la cirug√≠a.";
        }

        return summary;
    }

    private async Task HandleQueryAsync(ITelegramBotClient bot, long chatId, string rawText, CancellationToken ct)
    {
        try
        {
            // Buscar appointments que coincidan
            var searchResult = await _searchService.FindCandidatesAsync(chatId, rawText, DateTime.Today);
            
            if (searchResult.NotFound)
            {
                await MessageSender.SendWithRetry(chatId,
                    "‚ùå No encontr√© cirug√≠as que coincidan con tu consulta.",
                    cancellationToken: ct);
                return;
            }
            
            var message = searchResult.IsAmbiguous ? 
                "üìã Encontr√© estas cirug√≠as:\n\n" : 
                "üìã Informaci√≥n de la cirug√≠a:\n\n";
            
            foreach (var appointment in searchResult.Candidates)
            {
                message += $"üìÖ {appointment.FechaHora?.ToString("dd/MM/yyyy HH:mm")}\n";
                message += $"üìç {appointment.Lugar}\n";
                message += $"üë®‚Äç‚öïÔ∏è {appointment.Cirujano}\n";
                message += $"üè• {appointment.Cirugia} (x{appointment.Cantidad})\n";
                
                if (!string.IsNullOrEmpty(appointment.Anestesiologo))
                    message += $"üíâ {appointment.Anestesiologo}\n";
                
                message += "\n";
            }
            
            await MessageSender.SendWithRetry(chatId, message, cancellationToken: ct);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[QUERY] Error: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Hubo un error procesando tu consulta.",
                cancellationToken: ct);
        }
    }

    #endregion

    // M√©todos p√∫blicos para gesti√≥n
    public void ReiniciarConversacion(long chatId) => _stateManager.ClearContext(chatId);

    /// <summary>
    /// Maneja mensajes cuando hay un contexto conversacional activo
    /// </summary>
    private async Task HandleWithActiveContext(ITelegramBotClient bot, long chatId, string rawText, Appointment appt, ConversationContext context, CancellationToken ct)
    {
        try
        {
            // Agregar el input al historial
            appt.HistoricoInputs.Add(rawText);
            
            switch (context.Type)
            {
                case ContextType.FieldWizard:
                    // Delegar al wizard handler
                    if (await _wizardHandler.HandleFieldWizard(bot, appt, rawText, chatId, ct))
                    {
                        return; // Wizard manej√≥ el mensaje
                    }
                    
                    // Si wizard no lo manej√≥, continuar con flujo normal
                    await _llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
                    break;
                    
                case ContextType.Confirming:
                    // Manejar respuestas de confirmaci√≥n
                    await HandleConfirmationResponse(bot, appt, rawText, chatId, ct);
                    break;
                    
                case ContextType.RegisteringSurgery:
                    // Continuar con registro normal
                    await _llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
                    break;
                    
                case ContextType.ModifyingSurgery:
                    // Manejar modificaci√≥n en contexto
                    await HandleModificationInContext(bot, appt, rawText, chatId, ct);
                    break;
                    
                default:
                    // Fallback a procesamiento normal
                    await _llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[CONTEXT] Error handling message with active context: {ex.Message}");
            
            // Fallback a procesamiento normal
            await _llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
        }
    }

    /// <summary>
    /// Maneja respuestas cuando el usuario est√° en modo confirmaci√≥n
    /// </summary>
    private async Task HandleConfirmationResponse(ITelegramBotClient bot, Appointment appt, string rawText, long chatId, CancellationToken ct)
    {
        var response = rawText.Trim().ToLowerInvariant();
        
        // Respuestas afirmativas
        if (response is "s√≠" or "si" or "yes" or "ok" or "confirmar" or "confirmo" or "dale" or "perfecto")
        {
            // Proceder con confirmaci√≥n
            await _confirmationService.ProcessConfirmationAsync(bot, appt, chatId, ct);
            _stateManager.ClearContext(chatId);
            return;
        }
        
        // Respuestas negativas o de edici√≥n
        if (response is "no" or "nope" or "cambiar" or "editar" or "modificar" or "corregir")
        {
            appt.ConfirmacionPendiente = false;
            await MessageSender.SendWithRetry(chatId, 
                "Dale, ¬øqu√© quer√©s cambiar? Pod√©s decirme qu√© cosa (fecha, lugar, cirujano) o mandarme el dato nuevo.", 
                cancellationToken: ct);
            return;
        }
        
        // Si no es una respuesta clara, recordar el contexto
        await MessageSender.SendWithRetry(chatId,
            $"No entend√≠ \"{rawText}\".\n\n" +
            "Necesito que me confirmes si est√°n bien los datos.\n" +
            "Poneme 's√≠' para confirmar o 'no' si quer√©s cambiar algo.",
            cancellationToken: ct);
    }

    /// <summary>
    /// Maneja modificaci√≥n cuando ya estamos en contexto de modificaci√≥n
    /// </summary>
    private async Task HandleModificationInContext(ITelegramBotClient bot, Appointment appt, string rawText, long chatId, CancellationToken ct)
    {
        // Si est√° en modo de edici√≥n de campo espec√≠fico, usar el wizard
        if (appt.CampoAEditar != Appointment.CampoPendiente.Ninguno)
        {
            // Delegar al message handler para manejar edici√≥n
            await _messageHandler.HandleEditMode(bot, appt, rawText, chatId, ct, _llmProcessor);
            return;
        }
        
        // Sino, procesar como nuevo input de modificaci√≥n
        await _llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
    }

    /// <summary>
    /// Detecta r√°pidamente si un mensaje tiene intenci√≥n de modificaci√≥n
    /// usando patrones b√°sicos sin LLM para m√°xima velocidad
    /// </summary>
    private bool IsModificationIntent(string rawText)
    {
        var normalized = rawText.Trim().ToLowerInvariant();
        
        // Patrones claros de modificaci√≥n
        var modificationPatterns = new[]
        {
            "quiero cambiar",
            "necesito cambiar", 
            "cambiar la cirugia",
            "cambiar cirugia",
            "modificar la cirugia",
            "modificar cirugia",
            "editar la cirugia",
            "editar cirugia",
            "quiero modificar",
            "necesito modificar",
            "cambiar el horario",
            "cambiar la hora",
            "cambiar el lugar",
            "cambiar cirujano",
            "cambiar anestesiologo"
        };
        
        foreach (var pattern in modificationPatterns)
        {
            if (normalized.Contains(pattern))
            {
                Console.WriteLine($"[MODIFICATION-INTENT] Found pattern: '{pattern}' in message");
                return true;
            }
        }
        
        return false;
    }

    /// <summary>
    /// Muestra los detalles de la cirug√≠a encontrada y pregunta qu√© quiere modificar con botones
    /// </summary>
    private async Task ShowAppointmentDetailsAndAskWhatToModify(ITelegramBotClient bot, Appointment appointment, long chatId, CancellationToken ct)
    {
        try
        {
            Console.WriteLine($"[MODIFY-DETAILS] Showing appointment details for modification");
            
            // Construir mensaje con detalles actuales
            var details = "‚úÖ <b>Encontr√© esta cirug√≠a:</b>\n\n";
            details += $"üìÖ <b>Fecha:</b> {appointment.FechaHora?.ToString("dd/MM/yyyy") ?? "No definida"}\n";
            details += $"‚è∞ <b>Hora:</b> {appointment.FechaHora?.ToString("HH:mm") ?? "No definida"}\n";
            details += $"üè• <b>Lugar:</b> {appointment.Lugar ?? "No definido"}\n";
            details += $"üë®‚Äç‚öïÔ∏è <b>Cirujano:</b> {appointment.Cirujano ?? "No definido"}\n";
            details += $"üî¨ <b>Cirug√≠a:</b> {appointment.Cirugia ?? "No definida"}\n";
            details += $"üî¢ <b>Cantidad:</b> {appointment.Cantidad?.ToString() ?? "1"}\n";
            details += $"üíâ <b>Anestesi√≥logo:</b> {appointment.Anestesiologo ?? "No asignado"}\n\n";
            details += "‚ùì <b>¬øQu√© quer√©s cambiar?</b>";

            // Crear teclado con opciones de modificaci√≥n
            if (_quickEdit != null)
            {
                var keyboard = await _quickEdit.CreateModificationKeyboard(appointment);
                await MessageSender.SendWithRetry(chatId, details, replyMarkup: keyboard, cancellationToken: ct);
            }
            else
            {
                // Fallback sin botones
                details += "\n\nüí° <b>Pod√©s decir:</b>\n";
                details += "‚Ä¢ \"cambiar la hora a las 16hs\"\n";
                details += "‚Ä¢ \"cambiar el lugar a Anchorena\"\n";
                details += "‚Ä¢ \"cambiar cirujano a Garc√≠a\"\n";
                details += "‚Ä¢ \"cambiar anestesi√≥logo\"\n\n";
                details += "‚ùå Escrib√≠ <b>\"cancelar\"</b> para empezar de nuevo.";
                
                await MessageSender.SendWithRetry(chatId, details, cancellationToken: ct);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MODIFY-DETAILS] Error showing appointment details: {ex.Message}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Error mostrando los detalles. Escrib√≠ **\"cancelar\"** para empezar de nuevo.",
                cancellationToken: ct);
        }
    }

    /// <summary>
    /// Detecta comandos de cancelaci√≥n para reiniciar el contexto
    /// </summary>
    private bool IsCancelCommand(string rawText)
    {
        var normalized = rawText.Trim().ToLowerInvariant();
        
        var cancelPatterns = new[]
        {
            "cancelar",
            "cancela",
            "cancel",
            "salir",
            "sal√≠",
            "exit",
            "stop",
            "para",
            "parar",
            "empezar de nuevo",
            "empezar otra vez",
            "reiniciar",
            "restart"
        };
        
        foreach (var pattern in cancelPatterns)
        {
            if (normalized == pattern || normalized.Contains($" {pattern} ") || normalized.StartsWith($"{pattern} ") || normalized.EndsWith($" {pattern}"))
            {
                Console.WriteLine($"[CANCEL-COMMAND] Found pattern: '{pattern}' in message");
                return true;
            }
        }
        
        return false;
    }

    public int ObtenerConversacionesActivas() => _stateManager.GetActiveConversationsCount();
    public void LimpiarConversacionesAntiguas(TimeSpan tiempoLimite) => _stateManager.CleanOldConversations(tiempoLimite);
}