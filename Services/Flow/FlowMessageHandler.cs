using Telegram.Bot;
using RegistroCx.Models;
using RegistroCx.Helpers;
using RegistroCx.ProgramServices.Services.Telegram;
using RegistroCx.Services;
using RegistroCx.Services.UI;
using RegistroCx.Helpers._0Auth;
using RegistroCx.Services.Repositories;
using RegistroCx.Services.Reports;

namespace RegistroCx.Services.Flow;

public class FlowMessageHandler
{
    private readonly IGoogleOAuthService _oauthService;
    private readonly IUserProfileRepository _userRepo;
    private readonly CalendarSyncService _calendarSync;
    private readonly IAppointmentRepository _appointmentRepo;
    private readonly IReportService _reportService;
    private readonly IQuickEditService? _quickEditService;

    public FlowMessageHandler(
        IGoogleOAuthService oauthService, 
        IUserProfileRepository userRepo, 
        CalendarSyncService calendarSync,
        IAppointmentRepository appointmentRepo,
        IReportService reportService,
        IQuickEditService? quickEditService = null)
    {
        _oauthService = oauthService;
        _userRepo = userRepo;
        _calendarSync = calendarSync;
        _appointmentRepo = appointmentRepo;
        _reportService = reportService;
        _quickEditService = quickEditService;
    }
    public async Task<bool> HandleSpecialCommandsAsync(ITelegramBotClient bot, long chatId, string rawText, CancellationToken ct)
    {
        var textLower = rawText.Trim().ToLowerInvariant();
        
        // Comandos de reinicio y cancelaci√≥n (expandidos)
        if (textLower is "/start" or "/reset" or "/reiniciar" or "reiniciar" or "cancelar" or "empezar de nuevo" or
            "cancel" or "borrar" or "eliminar" or "cancel√°" or "borr√°" or "elimin√°" or "empezar otra vez" or
            "nuevo" or "otra cirugia" or "otra cirug√≠a")
        {
            await MessageSender.SendWithRetry(chatId,
                "‚ú® Perfecto, empezamos de nuevo. Contame los datos de la cirug√≠a que quer√©s agendar.",
                cancellationToken: ct);
            return true;
        }

        // Mensajes de cancelaci√≥n de cirug√≠as existentes
        if (textLower.Contains("cancela") && (textLower.Contains("cirug") || textLower.Contains("ma√±ana") || textLower.Contains("hoy") || textLower.Contains("ayer")))
        {
            await MessageSender.SendWithRetry(chatId,
                "Para cancelar cirug√≠as ya agendadas, necesit√°s contactar directamente al centro quir√∫rgico o a tu coordinador. Yo solo te ayudo a registrar nuevas cirug√≠as.\n\n¬øQuer√©s agendar alguna cirug√≠a nueva?",
                cancellationToken: ct);
            return true;
        }

        // Saludos y mensajes sociales (expandidos)
        if (textLower is "hola" or "hello" or "hi" or "buenas" or "buen d√≠a" or "buenos d√≠as" or "buenas tardes" or "buenas noches" or
            "¬øc√≥mo est√°s?" or "como estas?" or "¬øc√≥mo and√°s?" or "como andas?" or "¬øqu√© tal?" or "que tal?" or
            "hola, ¬øc√≥mo est√°s?" or "hola como estas" or "hola que tal" or "gracias" or "muchas gracias" or "ok gracias" or
            "perfecto" or "genial" or "excelente" or "muy bien" or "est√° bien" or "todo bien" or
            "chau" or "adi√≥s" or "hasta luego" or "nos vemos" or "bye")
        {
            var response = textLower.Contains("grac") || textLower.Contains("perfecto") || textLower.Contains("genial") || textLower.Contains("excelente") ?
                "¬°De nada! üòä Cualquier cosa que necesites, ac√° estoy. ¬øTen√©s alguna cirug√≠a m√°s para agendar?" :
                textLower.Contains("chau") || textLower.Contains("adi√≥s") || textLower.Contains("hasta") || textLower.Contains("bye") ?
                "¬°Hasta luego! üëã Que tengas un buen d√≠a. Cuando necesites agendar cirug√≠as, ya sab√©s d√≥nde encontrarme." :
                "¬°Hola! Muy bien, gracias üòä\n\nSoy tu asistente para registrar cirug√≠as. Solo escribime los datos como:\n\nüìù <b>Ejemplo:</b> \"ma√±ana 2 cers quiroga callao 14hs\"\n\n¬øTen√©s alguna cirug√≠a para agendar?";
            
            await MessageSender.SendWithRetry(chatId, response, cancellationToken: ct);
            return true;
        }

        // Preguntas sobre funcionamiento
        if (textLower.Contains("¬øc√≥mo funciona") || textLower.Contains("como funciona") || 
            textLower.Contains("¬øqu√© hac") || textLower.Contains("que hac") ||
            textLower.Contains("ayuda") || textLower.Contains("/help") ||
            textLower.Contains("¬øpara qu√©") || textLower.Contains("para que") ||
            textLower.Contains("explicame") || textLower.Contains("expl√≠came"))
        {
            await MessageSender.SendWithRetry(chatId,
                "üìã <b>¬øC√ìMO FUNCIONA?</b>\n" +
                "Simplemente escribime los datos de tu cirug√≠a en lenguaje natural. Yo entiendo y organizo autom√°ticamente:\n\n" +
                "üîπ <b>Ejemplo:</b> \"23/08 2 CERS + 1 MLD Sanchez Sanatorio Anchorena Pedro 14hs\"\n" +
                "‚Ä¢ Detectar√© que son 3 cirug√≠as diferentes\n" +
                "‚Ä¢ Extraer√© fecha, hora, lugar, cirujano, etc.\n" +
                "‚Ä¢ Te pedir√© solo los datos que falten\n" +
                "‚Ä¢ Crear√© eventos en tu Google Calendar\n\n" +
                "‚ú® <b>CARACTER√çSTICAS:</b>\n" +
                "‚Ä¢ üé§ Acepto mensajes de voz\n" +
                "‚Ä¢ üî¢ Proceso m√∫ltiples cirug√≠as de una vez\n" +
                "‚Ä¢ üìÖ Sincronizaci√≥n autom√°tica con Google Calendar\n" +
                "‚Ä¢ üíâ Invito anestesi√≥logos por email\n\n" +
                "üöÄ <b>¬°Empez√° ahora!</b> Mandame cualquier cirug√≠a y yo me encargo del resto.",
                cancellationToken: ct);
            return true;
        }

        if (textLower is "/autorizar" or "autorizar")
        {
            await HandleAuthorizationCommand(bot, chatId, ct);
            return true;
        }

        if (textLower is "/test-reminder" or "/testreminder")
        {
            await HandleTestReminderCommand(bot, chatId, ct);
            return true;
        }

        if (textLower is "/help-audio" or "/audio-help")
        {
            await HandleAudioHelpCommand(bot, chatId, ct);
            return true;
        }

        if (textLower is "/test-multi" or "/multi-test")
        {
            await HandleTestMultiSurgeriesCommand(bot, chatId, ct);
            return true;
        }

        // Comandos de reportes
        if (textLower is "/semanal" or "/mensual" or "/anual")
        {
            return await _reportService.HandleReportCommandAsync(bot, chatId, rawText, ct);
        }

        // Tambi√©n manejar respuestas a comandos de reportes pendientes (sin /)
        if (await _reportService.HandleReportCommandAsync(bot, chatId, rawText, ct))
        {
            return true;
        }

        return false;
    }

    private async Task HandleAuthorizationCommand(ITelegramBotClient bot, long chatId, CancellationToken ct)
    {
        try
        {
            Console.WriteLine($"[AUTHORIZATION] Starting authorization flow for chat {chatId}");

            // Obtener o crear perfil del usuario
            var userProfile = await _userRepo.GetOrCreateAsync(chatId, ct);

            // Construir URL de autorizaci√≥n (reutilizar l√≥gica existente del onboarding)
            var authUrl = _oauthService.BuildAuthUrl(chatId, userProfile.GoogleEmail ?? "user@example.com");

            await MessageSender.SendWithRetry(chatId,
                "üîê *Autorizaci√≥n de Google Calendar*\n\n" +
                "Para poder crear eventos en tu calendario, necesito que me autorices el acceso a Google Calendar.\n\n" +
                $"üîó [HACER CLIC AQU√ç PARA AUTORIZAR]({authUrl})\n\n" +
                "Una vez que completes la autorizaci√≥n, te avisar√© y sincronizar√© autom√°ticamente todas tus cirug√≠as pendientes.\n\n" +
                "‚ö†Ô∏è _El enlace te llevar√° a una p√°gina segura de Google para autorizar el acceso._",
                cancellationToken: ct);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AUTHORIZATION] Error starting authorization: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Hubo un error al iniciar el proceso de autorizaci√≥n. Por favor, intenta nuevamente.",
                cancellationToken: ct);
        }
    }

    private async Task HandleTestReminderCommand(ITelegramBotClient bot, long chatId, CancellationToken ct)
    {
        try
        {
            Console.WriteLine($"[TEST-REMINDER] Manual reminder check requested for chat {chatId}");

            // Get appointments that need reminders (normally would be called by background service)
            var appointmentsNeedingReminders = await _appointmentRepo.GetAppointmentsNeedingRemindersAsync(ct);
            
            if (appointmentsNeedingReminders.Count == 0)
            {
                await MessageSender.SendWithRetry(chatId,
                    "‚ÑπÔ∏è No hay cirug√≠as que necesiten recordatorio en las pr√≥ximas 24 horas.",
                    cancellationToken: ct);
                return;
            }

            await MessageSender.SendWithRetry(chatId,
                $"üîç Encontr√© {appointmentsNeedingReminders.Count} cirugia(s) que necesitan recordatorio:",
                cancellationToken: ct);

            foreach (var appointment in appointmentsNeedingReminders)
            {
                // Test the reminder logic
                if (appointment.FechaHora.HasValue)
                {
                    var timeUntilSurgery = appointment.FechaHora.Value - DateTime.Now;
                    var hoursUntil = (int)timeUntilSurgery.TotalHours;

                    var testMessage = $"‚è∞ **TEST RECORDATORIO**\n\n" +
                                     $"üè• **{appointment.Cantidad} {appointment.Cirugia?.ToUpper()}**\n" +
                                     $"üìÖ **Fecha:** {appointment.FechaHora:dddd, dd MMMM yyyy}\n" +
                                     $"‚åö **Hora:** {appointment.FechaHora:HH:mm}\n" +
                                     $"üìç **Lugar:** {appointment.Lugar}\n" +
                                     $"üë®‚Äç‚öïÔ∏è **Cirujano:** {appointment.Cirujano}\n" +
                                     $"üíâ **Anestesi√≥logo:** {appointment.Anestesiologo}\n\n" +
                                     $"‚è≥ **Faltan {hoursUntil} horas**\n\n" +
                                     $"*Este es un recordatorio de prueba. El recordatorio real se enviar√° autom√°ticamente.*";

                    await MessageSender.SendWithRetry(chatId, testMessage, cancellationToken: ct);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[TEST-REMINDER] Error testing reminders: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Error al probar los recordatorios. Verifica los logs.",
                cancellationToken: ct);
        }
    }

    private async Task HandleAudioHelpCommand(ITelegramBotClient bot, long chatId, CancellationToken ct)
    {
        try
        {
            var helpMessage = "üé§ **AYUDA DE MENSAJES DE VOZ Y AUDIO**\n\n" +
                             "‚ú® **Ahora puedes enviar mensajes de voz para registrar cirug√≠as!**\n\n" +
                             "üìã **C√≥mo funciona:**\n" +
                             "‚Ä¢ Mant√©n presionado el bot√≥n del micr√≥fono üé§\n" +
                             "‚Ä¢ Habla claramente describiendo la cirug√≠a\n" +
                             "‚Ä¢ Suelta para enviar el mensaje de voz\n" +
                             "‚Ä¢ El bot convertir√° tu voz a texto y procesar√° la informaci√≥n\n\n" +
                             "üéØ **Ejemplo de lo que puedes decir:**\n" +
                             "\"Hola, necesito agendar una amigdalectom√≠a para ma√±ana a las 2 de la tarde en el Hospital Italiano con el doctor Rodriguez y anestesi√≥logo Martinez\"\n\n" +
                             "üîß **Tambi√©n acepta:**\n" +
                             "‚Ä¢ Archivos de audio (.mp3, .ogg, .wav)\n" +
                             "‚Ä¢ Mensajes de voz de Telegram\n" +
                             "‚Ä¢ Comandos por voz (ej: \"cancelar\", \"confirmar\")\n\n" +
                             "‚ö° **El procesamiento toma unos segundos**\n" +
                             "Te mostrar√© lo que entend√≠ antes de procesarlo.\n\n" +
                             "¬°Prueba enviando un mensaje de voz ahora! üé§";

            await MessageSender.SendWithRetry(chatId, helpMessage, cancellationToken: ct);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AUDIO-HELP] Error showing audio help: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Error mostrando la ayuda de audio.",
                cancellationToken: ct);
        }
    }

    private async Task HandleTestMultiSurgeriesCommand(ITelegramBotClient bot, long chatId, CancellationToken ct)
    {
        try
        {
            var helpMessage = "üî• **PRUEBA DE M√öLTIPLES CIRUG√çAS**\n\n" +
                             "‚ú® **Ahora puedes registrar m√∫ltiples cirug√≠as en un solo mensaje!**\n\n" +
                             "üìã **Formatos soportados:**\n" +
                             "‚Ä¢ `2 CERS + 1 MLD ma√±ana 14hs Anchorena Quiroga Martinez`\n" +
                             "‚Ä¢ `3 adenoides y 2 am√≠gdalas 15/08 Hospital Rodriguez`\n" +
                             "‚Ä¢ `CERS x2, MLD x1 hoy 16hs`\n" +
                             "‚Ä¢ `2x CERS, 1x MLD pasado ma√±ana`\n" +
                             "‚Ä¢ `CERS por 2 m√°s MLD por 1`\n\n" +
                             "üéØ **Ejemplos que puedes probar:**\n" +
                             "1. `2 CERS + 1 MLD ma√±ana 14hs Sanatorio Anchorena Dr. Quiroga Martinez`\n" +
                             "2. `3 adenoides y 2 am√≠gdalas 15/08/2025 Hospital Italiano`\n" +
                             "3. `CERS x2, MLD x1 hoy 16:30 Mater Dei`\n\n" +
                             "‚ö° **C√≥mo funciona:**\n" +
                             "1. **Completa todos los datos** (fecha, hora, lugar, cirujano, anestesi√≥logo)\n" +
                             "2. **Detecta m√∫ltiples cirug√≠as** autom√°ticamente al confirmar\n" +
                             "3. **Crea cada cirug√≠a** con los mismos datos base\n" +
                             "4. **Permite editar individualmente** cada cirug√≠a\n" +
                             "5. **Te muestra resumen final** para confirmar todas juntas\n\n" +
                             "‚úèÔ∏è **Comandos de edici√≥n granular:**\n" +
                             "‚Ä¢ `cirug√≠a 1 hora 16hs` - Cambiar hora espec√≠fica\n" +
                             "‚Ä¢ `MLD lugar Hospital Italiano` - Cambiar por nombre\n" +
                             "‚Ä¢ `primera cirug√≠a anestesi√≥logo L√≥pez` - Por posici√≥n\n\n" +
                             "üß™ **¬°Prueba enviando uno de los ejemplos ahora!**";

            await MessageSender.SendWithRetry(chatId, helpMessage, cancellationToken: ct);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[MULTI-TEST] Error showing multi surgery help: {ex}");
            await MessageSender.SendWithRetry(chatId,
                "‚ùå Error mostrando la ayuda de m√∫ltiples cirug√≠as.",
                cancellationToken: ct);
        }
    }

    public async Task<bool> HandleConfirmationAsync(ITelegramBotClient bot, Appointment appt, string rawText, long chatId, CancellationToken ct)
    {
        if (!appt.ConfirmacionPendiente) return false;

        var lower = rawText.Trim().ToLowerInvariant();

        if (lower is "si" or "s√≠" or "ok" or "dale" or "confirmo" or "confirmar")
        {
            appt.ConfirmacionPendiente = false;

            var (okFecha, err) = FechasHelper.ValidarFechaCirugia(appt.FechaHora, DateTime.Now);
            if (!okFecha)
            {
                await MessageSender.SendWithRetry(chatId, err!, cancellationToken: ct);
                return true;
            }

            // Nota: El mensaje de confirmaci√≥n se env√≠a desde AppointmentConfirmationService
            // await MessageSender.SendWithRetry(chatId,
            //     "‚úÖ Confirmado. El evento fue creado en el calendario.",
            //     cancellationToken: ct);
            return true;
        }
        else if (lower.StartsWith("no") || lower.Contains("cambiar") || lower.Contains("correg"))
        {
            appt.ConfirmacionPendiente = false;
            appt.CampoAEditar = Appointment.CampoPendiente.EsperandoNombreCampo;
            await  MessageSender.SendWithRetry(chatId, GetEditModeInstructions(), cancellationToken: ct);
            return true;
        }

        return false;
    }

    public async Task<bool> HandleEditMode(ITelegramBotClient bot, Appointment appt, string rawText, long chatId, CancellationToken ct, FlowLLMProcessor llmProcessor)
    {
        if (appt.CampoAEditar != Appointment.CampoPendiente.EsperandoNombreCampo) return false;

        // Intentar parsear campo + valor directo
        if (CamposExistentes.TryParseCambioCampo(rawText, out var campoCambio, out var valorDirecto))
        {
            if (!string.IsNullOrWhiteSpace(valorDirecto))
            {
                // NUEVO: Verificar si necesita normalizaci√≥n LLM
                if (campoCambio is Appointment.CampoPendiente.Lugar or 
                                  Appointment.CampoPendiente.Cirujano or 
                                  Appointment.CampoPendiente.Anestesiologo or
                                  Appointment.CampoPendiente.Cirugia)
                {
                    appt.CampoAEditar = Appointment.CampoPendiente.Ninguno;
                    await llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
                    return true;
                }
                else
                {
                    // Para campos que NO necesitan normalizaci√≥n
                    if (CamposExistentes.TryAplicarValorCampo(appt, campoCambio, valorDirecto, out var err))
                    {
                        appt.CampoAEditar = Appointment.CampoPendiente.Ninguno;
                        await MessageSender.SendWithRetry(chatId,
                            CamposExistentes.GenerarMensajeActualizacion(campoCambio, valorDirecto),
                            cancellationToken: ct);
                        
                        await TryConfirmation(bot, appt, chatId, ct);
                        return true;
                    }
                    else
                    {
                        await MessageSender.SendWithRetry(chatId, err!, cancellationToken: ct);
                        return true;
                    }
                }
            }
            else
            {
                appt.CampoQueFalta = campoCambio;
                appt.CampoAEditar = Appointment.CampoPendiente.Ninguno;
                appt.IntentosCampoActual = 0;
                await MessageSender.SendWithRetry(chatId,
                    $"Perfecto. Decime el nuevo valor para {CamposExistentes.NombreHumanoCampo(campoCambio)}:",
                    cancellationToken: ct);
                return true;
            }
        }
        
        // Intentar parsear solo el nombre del campo
        if (CamposExistentes.TryParseSoloCampo(rawText, out var soloNombreCampo))
        {
            appt.CampoQueFalta = soloNombreCampo;
            appt.CampoAEditar = Appointment.CampoPendiente.Ninguno;
            appt.IntentosCampoActual = 0;
            await MessageSender.SendWithRetry(chatId,
                $"Perfecto. Decime el nuevo valor para {CamposExistentes.NombreHumanoCampo(soloNombreCampo)}:",
                cancellationToken: ct);
            return true;
        }

        await MessageSender.SendWithRetry(chatId,
            "No entend√≠ qu√© campo quer√©s cambiar. Dec√≠ alguno de estos:\n" +
            "'fecha', 'hora', 'lugar', 'cirujano', 'cirugia', 'cantidad', 'anestesiologo'",
            cancellationToken: ct);
        return true;
    }

    public async Task<bool> HandleDirectChanges(ITelegramBotClient bot, Appointment appt, string rawText, long chatId, CancellationToken ct, FlowLLMProcessor llmProcessor)
    {
        if (!CamposExistentes.TryParseCambioCampo(rawText, out var campoCambioDirecto, out var valorCambioDirecto) ||
            campoCambioDirecto == Appointment.CampoPendiente.Ninguno)
            return false;

        if (!string.IsNullOrWhiteSpace(valorCambioDirecto))
        {
            // Si es lugar, cirujano o anestesiologo, enviar al LLM para normalizar
            if (campoCambioDirecto is Appointment.CampoPendiente.Lugar or 
                                     Appointment.CampoPendiente.Cirujano or 
                                     Appointment.CampoPendiente.Anestesiologo or
                                     Appointment.CampoPendiente.Cirugia) // AGREGADO: cirugia tambi√©n necesita normalizaci√≥n
            {
                await llmProcessor.ProcessWithLLM(bot, appt, rawText, chatId, ct);
                return true;
            }
            else
            {
                // CORREGIDO: Solo para campos que NO necesitan normalizaci√≥n (cantidad, fecha/hora)
                if (CamposExistentes.TryAplicarValorCampo(appt, campoCambioDirecto, valorCambioDirecto, out var err))
                {
                    await MessageSender.SendWithRetry(chatId,
                        CamposExistentes.GenerarMensajeActualizacion(campoCambioDirecto, valorCambioDirecto),
                        cancellationToken: ct);
                    
                    await TryConfirmation(bot, appt, chatId, ct);
                    return true;
                }
                else
                {
                    await MessageSender.SendWithRetry(chatId, err!, cancellationToken: ct);
                    return true;
                }
            }
        }

        // Si no hay valor, pedir el valor del campo
        appt.CampoQueFalta = campoCambioDirecto;
        appt.IntentosCampoActual = 0;
        await MessageSender.SendWithRetry(chatId,
            $"Necesito el valor de {CamposExistentes.NombreHumanoCampo(campoCambioDirecto)}.",
            cancellationToken: ct);
        return true;
    }

    private string GetEditModeInstructions()
{
    return "‚úèÔ∏è ¬øQu√© quer√©s cambiar?\n\n" +
           "Pod√©s escribir:\n" +
           "üëâ Solo el nombre del campo (ej: `fecha`, `hora`, `lugar`)\n" +
           "üëâ O el campo + el nuevo valor (ej: `fecha 08/08`, `cirujano Rodriguez`)\n\n" +
           "Campos disponibles: `fecha`, `hora`, `lugar`, `cirujano`, `cirugia`, `cantidad`, `anestesiologo`";
}

    private async Task TryConfirmation(ITelegramBotClient bot, Appointment appt, long chatId, CancellationToken ct)
    {
        if (await FlowValidationHelper.TryConfirmation(bot, appt, chatId, ct, _quickEditService))
            return;
        
        await MessageSender.SendWithRetry(chatId,
            "Pod√©s cambiar otro campo o escribir 'confirmar'.",
            cancellationToken: ct);
    }
}