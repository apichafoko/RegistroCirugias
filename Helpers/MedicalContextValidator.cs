using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace RegistroCx.Helpers;

/// <summary>
/// Validador que detecta si un texto tiene contexto m√©dico/quir√∫rgico relevante
/// </summary>
public static class MedicalContextValidator
{
    // Palabras clave m√©dicas/quir√∫rgicas que indican contexto relevante
    private static readonly HashSet<string> MedicalKeywords = new(StringComparer.OrdinalIgnoreCase)
    {
        // Procedimientos quir√∫rgicos
        "cers", "mld", "adenoides", "amigdalas", "am√≠gdalas", "cesarea", "ces√°rea", 
        "apendicectomia", "apendicectom√≠a", "colecistectomia", "colecistectom√≠a", 
        "hernia", "hernioplastia", "hernioplast√≠a", "laparoscopia", "laparoscop√≠a",
        "artroscopia", "artroscop√≠a", "endoscopia", "endoscop√≠a", "biopsia",
        "cirug√≠a", "cirugia", "operacion", "operaci√≥n", "quirofano", "quir√≥fano",
        "intervencion", "intervenci√≥n", "procedimiento", "extirpacion", "extirpaci√≥n",
        
        // Especialidades m√©dicas
        "cirujano", "anestesiologo", "anestesi√≥logo", "anestesia", "doctor", "dra", 
        "medico", "m√©dico", "especialista", "traumatologo", "traumat√≥logo",
        "cardiologo", "cardi√≥logo", "ginecologo", "ginec√≥logo", "urologo", "ur√≥logo",
        "otorrino", "neurocirujano", "plastico", "pl√°stico",
        
        // Lugares m√©dicos
        "hospital", "clinica", "cl√≠nica", "sanatorio", "centro", "medico", "m√©dico",
        "quirofano", "quir√≥fano", "sala", "pabellon", "pabell√≥n", "instituto",
        "italiano", "aleman", "alem√°n", "britanico", "brit√°nico", "finochietto",
        "anchorena", "mater", "dei", "favaloro", "fleni",
        
        // T√©rminos temporales m√©dicos comunes
        "cirugia", "cirug√≠a", "operaci√≥n", "operacion", "programar", "agendar",
        "turno", "cita", "fecha", "horario", "programado", "agendado",
        
        // N√∫meros que pueden indicar cantidades de procedimientos
        "cantidad", "procedimientos", "intervenciones",
        
        // T√©rminos de urgencia/programaci√≥n
        "urgente", "emergencia", "programado", "electivo", "electiva",
        "ma√±ana", "hoy", "pasado", "pr√≥ximo", "siguiente", "proximo",
        
        // Anestesia y medicamentos
        "sedacion", "sedaci√≥n", "general", "local", "epidural", "raqu√≠dea", "raquidea"
    };

    // Patrones de fecha/hora que indican contexto de programaci√≥n m√©dica
    private static readonly Regex[] DateTimePatterns = new[]
    {
        new Regex(@"\d{1,2}[/\-]\d{1,2}(?:[/\-]\d{2,4})?", RegexOptions.IgnoreCase), // dd/mm o dd/mm/yyyy
        new Regex(@"\d{1,2}:\d{2}", RegexOptions.IgnoreCase), // HH:mm
        new Regex(@"\d{1,2}h(?:s|oras?)?", RegexOptions.IgnoreCase), // 14hs, 14horas
        new Regex(@"(?:ma√±ana|hoy|ayer|pasado)", RegexOptions.IgnoreCase) // fechas relativas
    };

    // Patrones num√©ricos que pueden indicar cantidades de procedimientos
    private static readonly Regex[] QuantityPatterns = new[]
    {
        new Regex(@"\d+\s*(?:cers|mld|adenoides|am√≠gdalas|amigdalas)", RegexOptions.IgnoreCase),
        new Regex(@"(?:cers|mld|adenoides|am√≠gdalas|amigdalas)\s*x\s*\d+", RegexOptions.IgnoreCase),
        new Regex(@"\d+\s*(?:cirug[√≠i]as?|procedimientos?|intervenciones?)", RegexOptions.IgnoreCase)
    };

    /// <summary>
    /// Determina si el texto contiene contexto m√©dico/quir√∫rgico relevante
    /// </summary>
    public static bool HasMedicalContext(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return false;

        var normalizedInput = NormalizeText(input);
        var words = ExtractWords(normalizedInput);

        // Verificar palabras clave m√©dicas
        if (HasMedicalKeywords(words))
            return true;

        // Verificar patrones de fecha/hora (pueden indicar programaci√≥n m√©dica)
        if (HasDateTimePatterns(normalizedInput))
            return true;

        // Verificar patrones de cantidad de procedimientos
        if (HasQuantityPatterns(normalizedInput))
            return true;

        return false;
    }

    /// <summary>
    /// Genera un mensaje de ayuda para texto no m√©dico
    /// </summary>
    public static string GenerateHelpMessage()
    {
        return "ü§î **No entiendo ese tipo de mensaje.**\n\n" +
               "üìã **Soy tu asistente de cirug√≠as.** Puedo ayudarte con:\n\n" +
               "‚úÖ **Ejemplos de mensajes correctos:**\n" +
               "‚Ä¢ `2 CERS + 1 MLD ma√±ana 14hs Hospital Italiano Dr. Garc√≠a L√≥pez`\n" +
               "‚Ä¢ `Apendicectom√≠a 15/08 16:30 Sanatorio Anchorena`\n" +
               "‚Ä¢ `3 adenoides hoy Cl√≠nica Santa Isabel`\n" +
               "‚Ä¢ `Ces√°rea programada 20/08 9hs con Dr. Rodr√≠guez`\n\n" +
               "üé§ **Tambi√©n pod√©s enviar un mensaje de voz** describiendo tu cirug√≠a.\n\n" +
               "‚ùì **Comandos disponibles:**\n" +
               "‚Ä¢ `/ayuda` - Ver esta ayuda\n" +
               "‚Ä¢ `/semanal` - Reporte de esta semana\n" +
               "‚Ä¢ `/mensual` - Reporte mensual\n" +
               "‚Ä¢ `/anual` - Reporte anual\n\n" +
               "üí° **Tip:** Inclu√≠ fecha, hora, lugar, cirujano y tipo de cirug√≠a para mejores resultados.";
    }

    /// <summary>
    /// Genera un mensaje espec√≠fico para texto claramente no m√©dico
    /// </summary>
    public static string GenerateNonMedicalMessage(string userInput)
    {
        var examples = new[]
        {
            "\"2 CERS ma√±ana 14hs Hospital Italiano\"",
            "\"Apendicectom√≠a 15/08 Dr. Garc√≠a\"", 
            "\"3 adenoides hoy Cl√≠nica Santa Isabel\"",
            "\"Ces√°rea programada 20/08 9hs\""
        };

        var randomExample = examples[new Random().Next(examples.Length)];

        return $"ü§î **\"{userInput}\" no parece ser informaci√≥n sobre una cirug√≠a.**\n\n" +
               "üìã **Soy tu asistente especializado en cirug√≠as.** Necesito informaci√≥n como:\n" +
               "‚Ä¢ Tipo de cirug√≠a (CERS, MLD, apendicectom√≠a, etc.)\n" +
               "‚Ä¢ Fecha y hora\n" +
               "‚Ä¢ Hospital o cl√≠nica\n" +
               "‚Ä¢ Cirujano y anestesi√≥logo\n\n" +
               $"‚ú® **Ejemplo:** {randomExample}\n\n" +
               "üé§ **Tambi√©n pod√©s enviar un mensaje de voz** describiendo tu cirug√≠a.\n\n" +
               "‚ùì Escrib√≠ `/ayuda` para ver m√°s ejemplos y comandos disponibles.";
    }

    private static string NormalizeText(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return string.Empty;

        return text
            .ToLowerInvariant()
            .Replace("√°", "a").Replace("√©", "e").Replace("√≠", "i")
            .Replace("√≥", "o").Replace("√∫", "u").Replace("√±", "n")
            .Trim();
    }

    private static List<string> ExtractWords(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return new List<string>();

        // Extraer palabras alfanum√©ricas, manteniendo n√∫meros
        return Regex.Matches(text, @"\b\w+\b")
            .Cast<Match>()
            .Select(m => m.Value)
            .Where(word => word.Length > 1) // Filtrar palabras muy cortas
            .ToList();
    }

    private static bool HasMedicalKeywords(List<string> words)
    {
        return words.Any(word => MedicalKeywords.Contains(word));
    }

    private static bool HasDateTimePatterns(string text)
    {
        return DateTimePatterns.Any(pattern => pattern.IsMatch(text));
    }

    private static bool HasQuantityPatterns(string text)
    {
        return QuantityPatterns.Any(pattern => pattern.IsMatch(text));
    }

    /// <summary>
    /// Detecta si el texto son solo palabras inconexas (como "perro verde", "edificio alto")
    /// </summary>
    public static bool IsDisconnectedWords(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return false;

        var words = ExtractWords(NormalizeText(input));
        
        // Si tiene menos de 2 palabras, no es texto inconexo
        if (words.Count < 2)
            return false;

        // Si tiene contexto m√©dico, no es inconexo para nuestros prop√≥sitos
        if (HasMedicalContext(input))
            return false;

        // Si tiene patrones de fecha/hora/n√∫meros, podr√≠a ser relevante
        if (HasDateTimePatterns(input) || HasQuantityPatterns(input))
            return false;

        // Lista de palabras comunes que no tienen contexto m√©dico
        var commonNonMedicalWords = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            "perro", "gato", "casa", "auto", "coche", "carro", "verde", "azul", "rojo", 
            "alto", "bajo", "grande", "peque√±o", "edificio", "√°rbol", "mesa", "silla",
            "comida", "agua", "libro", "pel√≠cula", "m√∫sica", "deporte", "f√∫tbol",
            "trabajo", "oficina", "escuela", "universidad", "parque", "playa",
            "tiempo", "clima", "lluvia", "sol", "noche", "d√≠a", "semana",
            "dinero", "comprar", "vender", "mercado", "tienda", "restaurant",
            "familia", "amigo", "padre", "madre", "hijo", "hermano", "hermana"
        };

        // Si la mayor√≠a de las palabras son no-m√©dicas y comunes, probablemente es texto inconexo
        var nonMedicalCount = words.Count(word => commonNonMedicalWords.Contains(word));
        var ratio = (double)nonMedicalCount / words.Count;

        return ratio > 0.5; // M√°s del 50% son palabras no m√©dicas comunes
    }
}